/*!
 * devextreme-react
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

"use client";
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = exports.TypingUser = exports.MessageTimestampFormat = exports.Item = exports.Editing = exports.DayHeaderFormat = exports.Author = exports.Alert = exports.Chat = void 0;
const React = __importStar(require("react"));
const react_1 = require("react");
const chat_1 = __importDefault(require("devextreme/ui/chat"));
const component_1 = require("./core/component");
const nested_option_1 = __importDefault(require("./core/nested-option"));
const Chat = (0, react_1.memo)((0, react_1.forwardRef)((props, ref) => {
    const baseRef = (0, react_1.useRef)(null);
    (0, react_1.useImperativeHandle)(ref, () => ({
        instance() {
            return baseRef.current?.getInstance();
        }
    }), [baseRef.current]);
    const subscribableOptions = (0, react_1.useMemo)(() => (["items"]), []);
    const independentEvents = (0, react_1.useMemo)(() => (["onDisposing", "onInitialized", "onMessageDeleted", "onMessageDeleting", "onMessageEditCanceled", "onMessageEditingStart", "onMessageEntered", "onMessageUpdated", "onMessageUpdating", "onTypingEnd", "onTypingStart"]), []);
    const defaults = (0, react_1.useMemo)(() => ({
        defaultItems: "items",
    }), []);
    const expectedChildren = (0, react_1.useMemo)(() => ({
        alert: { optionName: "alerts", isCollectionItem: true },
        dayHeaderFormat: { optionName: "dayHeaderFormat", isCollectionItem: false },
        editing: { optionName: "editing", isCollectionItem: false },
        item: { optionName: "items", isCollectionItem: true },
        messageTimestampFormat: { optionName: "messageTimestampFormat", isCollectionItem: false },
        typingUser: { optionName: "typingUsers", isCollectionItem: true },
        user: { optionName: "user", isCollectionItem: false }
    }), []);
    const templateProps = (0, react_1.useMemo)(() => ([
        {
            tmplOption: "messageTemplate",
            render: "messageRender",
            component: "messageComponent"
        },
    ]), []);
    return (React.createElement((component_1.Component), {
        WidgetClass: chat_1.default,
        ref: baseRef,
        subscribableOptions,
        independentEvents,
        defaults,
        expectedChildren,
        templateProps,
        ...props,
    }));
}));
exports.Chat = Chat;
const _componentAlert = (props) => {
    return React.createElement((nested_option_1.default), {
        ...props,
        elementDescriptor: {
            OptionName: "alerts",
            IsCollectionItem: true,
        },
    });
};
const Alert = Object.assign(_componentAlert, {
    componentType: "option",
});
exports.Alert = Alert;
const _componentAuthor = (props) => {
    return React.createElement((nested_option_1.default), {
        ...props,
        elementDescriptor: {
            OptionName: "author",
        },
    });
};
const Author = Object.assign(_componentAuthor, {
    componentType: "option",
});
exports.Author = Author;
const _componentDayHeaderFormat = (props) => {
    return React.createElement((nested_option_1.default), {
        ...props,
        elementDescriptor: {
            OptionName: "dayHeaderFormat",
        },
    });
};
const DayHeaderFormat = Object.assign(_componentDayHeaderFormat, {
    componentType: "option",
});
exports.DayHeaderFormat = DayHeaderFormat;
const _componentEditing = (props) => {
    return React.createElement((nested_option_1.default), {
        ...props,
        elementDescriptor: {
            OptionName: "editing",
        },
    });
};
const Editing = Object.assign(_componentEditing, {
    componentType: "option",
});
exports.Editing = Editing;
const _componentItem = (props) => {
    return React.createElement((nested_option_1.default), {
        ...props,
        elementDescriptor: {
            OptionName: "items",
            IsCollectionItem: true,
            ExpectedChildren: {
                author: { optionName: "author", isCollectionItem: false }
            },
        },
    });
};
const Item = Object.assign(_componentItem, {
    componentType: "option",
});
exports.Item = Item;
const _componentMessageTimestampFormat = (props) => {
    return React.createElement((nested_option_1.default), {
        ...props,
        elementDescriptor: {
            OptionName: "messageTimestampFormat",
        },
    });
};
const MessageTimestampFormat = Object.assign(_componentMessageTimestampFormat, {
    componentType: "option",
});
exports.MessageTimestampFormat = MessageTimestampFormat;
const _componentTypingUser = (props) => {
    return React.createElement((nested_option_1.default), {
        ...props,
        elementDescriptor: {
            OptionName: "typingUsers",
            IsCollectionItem: true,
        },
    });
};
const TypingUser = Object.assign(_componentTypingUser, {
    componentType: "option",
});
exports.TypingUser = TypingUser;
const _componentUser = (props) => {
    return React.createElement((nested_option_1.default), {
        ...props,
        elementDescriptor: {
            OptionName: "user",
        },
    });
};
const User = Object.assign(_componentUser, {
    componentType: "option",
});
exports.User = User;
exports.default = Chat;
