/*!
 * devextreme-react
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

"use client";
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TooltipBorder = exports.Tooltip = exports.Title = exports.Subtitle = exports.Size = exports.Shadow = exports.Margin = exports.LoadingIndicator = exports.LegendTitleSubtitle = exports.LegendTitle = exports.LegendBorder = exports.Legend = exports.Label = exports.ItemTextFormat = exports.Geometry = exports.Format = exports.Font = exports.Export = exports.Border = exports.BarGaugeTitleSubtitle = exports.BarGaugeTitle = exports.Animation = exports.BarGauge = void 0;
const React = __importStar(require("react"));
const react_1 = require("react");
const bar_gauge_1 = __importDefault(require("devextreme/viz/bar_gauge"));
const component_1 = require("./core/component");
const nested_option_1 = __importDefault(require("./core/nested-option"));
const BarGauge = (0, react_1.memo)((0, react_1.forwardRef)((props, ref) => {
    const baseRef = (0, react_1.useRef)(null);
    (0, react_1.useImperativeHandle)(ref, () => ({
        instance() {
            return baseRef.current?.getInstance();
        }
    }), [baseRef.current]);
    const subscribableOptions = (0, react_1.useMemo)(() => (["loadingIndicator", "loadingIndicator.show", "values"]), []);
    const independentEvents = (0, react_1.useMemo)(() => (["onDisposing", "onDrawn", "onExported", "onExporting", "onFileSaving", "onIncidentOccurred", "onInitialized", "onTooltipHidden", "onTooltipShown"]), []);
    const defaults = (0, react_1.useMemo)(() => ({
        defaultLoadingIndicator: "loadingIndicator",
        defaultValues: "values",
    }), []);
    const expectedChildren = (0, react_1.useMemo)(() => ({
        animation: { optionName: "animation", isCollectionItem: false },
        barGaugeTitle: { optionName: "title", isCollectionItem: false },
        export: { optionName: "export", isCollectionItem: false },
        geometry: { optionName: "geometry", isCollectionItem: false },
        label: { optionName: "label", isCollectionItem: false },
        legend: { optionName: "legend", isCollectionItem: false },
        loadingIndicator: { optionName: "loadingIndicator", isCollectionItem: false },
        margin: { optionName: "margin", isCollectionItem: false },
        size: { optionName: "size", isCollectionItem: false },
        title: { optionName: "title", isCollectionItem: false },
        tooltip: { optionName: "tooltip", isCollectionItem: false }
    }), []);
    const templateProps = (0, react_1.useMemo)(() => ([
        {
            tmplOption: "centerTemplate",
            render: "centerRender",
            component: "centerComponent"
        },
    ]), []);
    return (React.createElement((component_1.Component), {
        WidgetClass: bar_gauge_1.default,
        ref: baseRef,
        subscribableOptions,
        independentEvents,
        defaults,
        expectedChildren,
        templateProps,
        ...props,
    }));
}));
exports.BarGauge = BarGauge;
const _componentAnimation = (props) => {
    return React.createElement((nested_option_1.default), {
        ...props,
        elementDescriptor: {
            OptionName: "animation",
        },
    });
};
const Animation = Object.assign(_componentAnimation, {
    componentType: "option",
});
exports.Animation = Animation;
const _componentBarGaugeTitle = (props) => {
    return React.createElement((nested_option_1.default), {
        ...props,
        elementDescriptor: {
            OptionName: "title",
            ExpectedChildren: {
                barGaugeTitleSubtitle: { optionName: "subtitle", isCollectionItem: false },
                font: { optionName: "font", isCollectionItem: false },
                margin: { optionName: "margin", isCollectionItem: false },
                subtitle: { optionName: "subtitle", isCollectionItem: false }
            },
        },
    });
};
const BarGaugeTitle = Object.assign(_componentBarGaugeTitle, {
    componentType: "option",
});
exports.BarGaugeTitle = BarGaugeTitle;
const _componentBarGaugeTitleSubtitle = (props) => {
    return React.createElement((nested_option_1.default), {
        ...props,
        elementDescriptor: {
            OptionName: "subtitle",
            ExpectedChildren: {
                font: { optionName: "font", isCollectionItem: false }
            },
        },
    });
};
const BarGaugeTitleSubtitle = Object.assign(_componentBarGaugeTitleSubtitle, {
    componentType: "option",
});
exports.BarGaugeTitleSubtitle = BarGaugeTitleSubtitle;
const _componentBorder = (props) => {
    return React.createElement((nested_option_1.default), {
        ...props,
        elementDescriptor: {
            OptionName: "border",
        },
    });
};
const Border = Object.assign(_componentBorder, {
    componentType: "option",
});
exports.Border = Border;
const _componentExport = (props) => {
    return React.createElement((nested_option_1.default), {
        ...props,
        elementDescriptor: {
            OptionName: "export",
        },
    });
};
const Export = Object.assign(_componentExport, {
    componentType: "option",
});
exports.Export = Export;
const _componentFont = (props) => {
    return React.createElement((nested_option_1.default), {
        ...props,
        elementDescriptor: {
            OptionName: "font",
        },
    });
};
const Font = Object.assign(_componentFont, {
    componentType: "option",
});
exports.Font = Font;
const _componentFormat = (props) => {
    return React.createElement((nested_option_1.default), {
        ...props,
        elementDescriptor: {
            OptionName: "format",
        },
    });
};
const Format = Object.assign(_componentFormat, {
    componentType: "option",
});
exports.Format = Format;
const _componentGeometry = (props) => {
    return React.createElement((nested_option_1.default), {
        ...props,
        elementDescriptor: {
            OptionName: "geometry",
        },
    });
};
const Geometry = Object.assign(_componentGeometry, {
    componentType: "option",
});
exports.Geometry = Geometry;
const _componentItemTextFormat = (props) => {
    return React.createElement((nested_option_1.default), {
        ...props,
        elementDescriptor: {
            OptionName: "itemTextFormat",
        },
    });
};
const ItemTextFormat = Object.assign(_componentItemTextFormat, {
    componentType: "option",
});
exports.ItemTextFormat = ItemTextFormat;
const _componentLabel = (props) => {
    return React.createElement((nested_option_1.default), {
        ...props,
        elementDescriptor: {
            OptionName: "label",
            ExpectedChildren: {
                font: { optionName: "font", isCollectionItem: false },
                format: { optionName: "format", isCollectionItem: false }
            },
        },
    });
};
const Label = Object.assign(_componentLabel, {
    componentType: "option",
});
exports.Label = Label;
const _componentLegend = (props) => {
    return React.createElement((nested_option_1.default), {
        ...props,
        elementDescriptor: {
            OptionName: "legend",
            ExpectedChildren: {
                border: { optionName: "border", isCollectionItem: false },
                font: { optionName: "font", isCollectionItem: false },
                itemTextFormat: { optionName: "itemTextFormat", isCollectionItem: false },
                legendBorder: { optionName: "border", isCollectionItem: false },
                legendTitle: { optionName: "title", isCollectionItem: false },
                margin: { optionName: "margin", isCollectionItem: false },
                title: { optionName: "title", isCollectionItem: false }
            },
            TemplateProps: [{
                    tmplOption: "markerTemplate",
                    render: "markerRender",
                    component: "markerComponent"
                }],
        },
    });
};
const Legend = Object.assign(_componentLegend, {
    componentType: "option",
});
exports.Legend = Legend;
const _componentLegendBorder = (props) => {
    return React.createElement((nested_option_1.default), {
        ...props,
        elementDescriptor: {
            OptionName: "border",
        },
    });
};
const LegendBorder = Object.assign(_componentLegendBorder, {
    componentType: "option",
});
exports.LegendBorder = LegendBorder;
const _componentLegendTitle = (props) => {
    return React.createElement((nested_option_1.default), {
        ...props,
        elementDescriptor: {
            OptionName: "title",
            ExpectedChildren: {
                font: { optionName: "font", isCollectionItem: false },
                legendTitleSubtitle: { optionName: "subtitle", isCollectionItem: false },
                margin: { optionName: "margin", isCollectionItem: false },
                subtitle: { optionName: "subtitle", isCollectionItem: false }
            },
        },
    });
};
const LegendTitle = Object.assign(_componentLegendTitle, {
    componentType: "option",
});
exports.LegendTitle = LegendTitle;
const _componentLegendTitleSubtitle = (props) => {
    return React.createElement((nested_option_1.default), {
        ...props,
        elementDescriptor: {
            OptionName: "subtitle",
            ExpectedChildren: {
                font: { optionName: "font", isCollectionItem: false }
            },
        },
    });
};
const LegendTitleSubtitle = Object.assign(_componentLegendTitleSubtitle, {
    componentType: "option",
});
exports.LegendTitleSubtitle = LegendTitleSubtitle;
const _componentLoadingIndicator = (props) => {
    return React.createElement((nested_option_1.default), {
        ...props,
        elementDescriptor: {
            OptionName: "loadingIndicator",
            DefaultsProps: {
                defaultShow: "show"
            },
            ExpectedChildren: {
                font: { optionName: "font", isCollectionItem: false }
            },
        },
    });
};
const LoadingIndicator = Object.assign(_componentLoadingIndicator, {
    componentType: "option",
});
exports.LoadingIndicator = LoadingIndicator;
const _componentMargin = (props) => {
    return React.createElement((nested_option_1.default), {
        ...props,
        elementDescriptor: {
            OptionName: "margin",
        },
    });
};
const Margin = Object.assign(_componentMargin, {
    componentType: "option",
});
exports.Margin = Margin;
const _componentShadow = (props) => {
    return React.createElement((nested_option_1.default), {
        ...props,
        elementDescriptor: {
            OptionName: "shadow",
        },
    });
};
const Shadow = Object.assign(_componentShadow, {
    componentType: "option",
});
exports.Shadow = Shadow;
const _componentSize = (props) => {
    return React.createElement((nested_option_1.default), {
        ...props,
        elementDescriptor: {
            OptionName: "size",
        },
    });
};
const Size = Object.assign(_componentSize, {
    componentType: "option",
});
exports.Size = Size;
const _componentSubtitle = (props) => {
    return React.createElement((nested_option_1.default), {
        ...props,
        elementDescriptor: {
            OptionName: "subtitle",
            ExpectedChildren: {
                font: { optionName: "font", isCollectionItem: false }
            },
        },
    });
};
const Subtitle = Object.assign(_componentSubtitle, {
    componentType: "option",
});
exports.Subtitle = Subtitle;
const _componentTitle = (props) => {
    return React.createElement((nested_option_1.default), {
        ...props,
        elementDescriptor: {
            OptionName: "title",
            ExpectedChildren: {
                barGaugeTitleSubtitle: { optionName: "subtitle", isCollectionItem: false },
                font: { optionName: "font", isCollectionItem: false },
                legendTitleSubtitle: { optionName: "subtitle", isCollectionItem: false },
                margin: { optionName: "margin", isCollectionItem: false }
            },
        },
    });
};
const Title = Object.assign(_componentTitle, {
    componentType: "option",
});
exports.Title = Title;
const _componentTooltip = (props) => {
    return React.createElement((nested_option_1.default), {
        ...props,
        elementDescriptor: {
            OptionName: "tooltip",
            ExpectedChildren: {
                border: { optionName: "border", isCollectionItem: false },
                font: { optionName: "font", isCollectionItem: false },
                format: { optionName: "format", isCollectionItem: false },
                shadow: { optionName: "shadow", isCollectionItem: false },
                tooltipBorder: { optionName: "border", isCollectionItem: false }
            },
            TemplateProps: [{
                    tmplOption: "contentTemplate",
                    render: "contentRender",
                    component: "contentComponent"
                }],
        },
    });
};
const Tooltip = Object.assign(_componentTooltip, {
    componentType: "option",
});
exports.Tooltip = Tooltip;
const _componentTooltipBorder = (props) => {
    return React.createElement((nested_option_1.default), {
        ...props,
        elementDescriptor: {
            OptionName: "border",
        },
    });
};
const TooltipBorder = Object.assign(_componentTooltipBorder, {
    componentType: "option",
});
exports.TooltipBorder = TooltipBorder;
exports.default = BarGauge;
