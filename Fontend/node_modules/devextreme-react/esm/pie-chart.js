/*!
 * devextreme-react
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

"use client";
import * as React from "react";
import { memo, forwardRef, useImperativeHandle, useRef, useMemo } from "react";
import dxPieChart from "devextreme/viz/pie_chart";
import { Component as BaseComponent } from "./core/component";
import NestedOption from "./core/nested-option";
const PieChart = memo(forwardRef((props, ref) => {
    const baseRef = useRef(null);
    useImperativeHandle(ref, () => ({
        instance() {
            return baseRef.current?.getInstance();
        }
    }), [baseRef.current]);
    const subscribableOptions = useMemo(() => (["loadingIndicator", "loadingIndicator.show"]), []);
    const independentEvents = useMemo(() => (["onDisposing", "onDone", "onDrawn", "onExported", "onExporting", "onFileSaving", "onIncidentOccurred", "onInitialized", "onLegendClick", "onPointClick", "onTooltipHidden", "onTooltipShown"]), []);
    const defaults = useMemo(() => ({
        defaultLoadingIndicator: "loadingIndicator",
    }), []);
    const expectedChildren = useMemo(() => ({
        adaptiveLayout: { optionName: "adaptiveLayout", isCollectionItem: false },
        animation: { optionName: "animation", isCollectionItem: false },
        annotation: { optionName: "annotations", isCollectionItem: true },
        commonAnnotationSettings: { optionName: "commonAnnotationSettings", isCollectionItem: false },
        commonSeriesSettings: { optionName: "commonSeriesSettings", isCollectionItem: false },
        export: { optionName: "export", isCollectionItem: false },
        legend: { optionName: "legend", isCollectionItem: false },
        loadingIndicator: { optionName: "loadingIndicator", isCollectionItem: false },
        margin: { optionName: "margin", isCollectionItem: false },
        pieChartTitle: { optionName: "title", isCollectionItem: false },
        series: { optionName: "series", isCollectionItem: true },
        seriesTemplate: { optionName: "seriesTemplate", isCollectionItem: false },
        size: { optionName: "size", isCollectionItem: false },
        title: { optionName: "title", isCollectionItem: false },
        tooltip: { optionName: "tooltip", isCollectionItem: false }
    }), []);
    const templateProps = useMemo(() => ([
        {
            tmplOption: "centerTemplate",
            render: "centerRender",
            component: "centerComponent"
        },
    ]), []);
    return (React.createElement((BaseComponent), {
        WidgetClass: dxPieChart,
        ref: baseRef,
        subscribableOptions,
        independentEvents,
        defaults,
        expectedChildren,
        templateProps,
        ...props,
    }));
}));
const _componentAdaptiveLayout = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "adaptiveLayout",
        },
    });
};
const AdaptiveLayout = Object.assign(_componentAdaptiveLayout, {
    componentType: "option",
});
const _componentAnimation = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "animation",
        },
    });
};
const Animation = Object.assign(_componentAnimation, {
    componentType: "option",
});
const _componentAnnotation = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "annotations",
            IsCollectionItem: true,
            ExpectedChildren: {
                annotationBorder: { optionName: "border", isCollectionItem: false },
                border: { optionName: "border", isCollectionItem: false },
                font: { optionName: "font", isCollectionItem: false },
                image: { optionName: "image", isCollectionItem: false },
                shadow: { optionName: "shadow", isCollectionItem: false }
            },
            TemplateProps: [{
                    tmplOption: "template",
                    render: "render",
                    component: "component"
                }, {
                    tmplOption: "tooltipTemplate",
                    render: "tooltipRender",
                    component: "tooltipComponent"
                }],
        },
    });
};
const Annotation = Object.assign(_componentAnnotation, {
    componentType: "option",
});
const _componentAnnotationBorder = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "border",
        },
    });
};
const AnnotationBorder = Object.assign(_componentAnnotationBorder, {
    componentType: "option",
});
const _componentArgumentFormat = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "argumentFormat",
        },
    });
};
const ArgumentFormat = Object.assign(_componentArgumentFormat, {
    componentType: "option",
});
const _componentBorder = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "border",
        },
    });
};
const Border = Object.assign(_componentBorder, {
    componentType: "option",
});
const _componentColor = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "color",
        },
    });
};
const Color = Object.assign(_componentColor, {
    componentType: "option",
});
const _componentCommonAnnotationSettings = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "commonAnnotationSettings",
            ExpectedChildren: {
                annotationBorder: { optionName: "border", isCollectionItem: false },
                border: { optionName: "border", isCollectionItem: false },
                font: { optionName: "font", isCollectionItem: false },
                image: { optionName: "image", isCollectionItem: false },
                shadow: { optionName: "shadow", isCollectionItem: false }
            },
            TemplateProps: [{
                    tmplOption: "template",
                    render: "render",
                    component: "component"
                }, {
                    tmplOption: "tooltipTemplate",
                    render: "tooltipRender",
                    component: "tooltipComponent"
                }],
        },
    });
};
const CommonAnnotationSettings = Object.assign(_componentCommonAnnotationSettings, {
    componentType: "option",
});
const _componentCommonSeriesSettings = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "commonSeriesSettings",
            ExpectedChildren: {
                border: { optionName: "border", isCollectionItem: false },
                color: { optionName: "color", isCollectionItem: false },
                hoverStyle: { optionName: "hoverStyle", isCollectionItem: false },
                label: { optionName: "label", isCollectionItem: false },
                selectionStyle: { optionName: "selectionStyle", isCollectionItem: false },
                seriesBorder: { optionName: "border", isCollectionItem: false },
                smallValuesGrouping: { optionName: "smallValuesGrouping", isCollectionItem: false }
            },
        },
    });
};
const CommonSeriesSettings = Object.assign(_componentCommonSeriesSettings, {
    componentType: "option",
});
const _componentConnector = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "connector",
        },
    });
};
const Connector = Object.assign(_componentConnector, {
    componentType: "option",
});
const _componentExport = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "export",
        },
    });
};
const Export = Object.assign(_componentExport, {
    componentType: "option",
});
const _componentFont = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "font",
        },
    });
};
const Font = Object.assign(_componentFont, {
    componentType: "option",
});
const _componentFormat = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "format",
        },
    });
};
const Format = Object.assign(_componentFormat, {
    componentType: "option",
});
const _componentHatching = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "hatching",
        },
    });
};
const Hatching = Object.assign(_componentHatching, {
    componentType: "option",
});
const _componentHoverStyle = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "hoverStyle",
            ExpectedChildren: {
                border: { optionName: "border", isCollectionItem: false },
                color: { optionName: "color", isCollectionItem: false },
                hatching: { optionName: "hatching", isCollectionItem: false },
                seriesBorder: { optionName: "border", isCollectionItem: false }
            },
        },
    });
};
const HoverStyle = Object.assign(_componentHoverStyle, {
    componentType: "option",
});
const _componentImage = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "image",
        },
    });
};
const Image = Object.assign(_componentImage, {
    componentType: "option",
});
const _componentLabel = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "label",
            ExpectedChildren: {
                argumentFormat: { optionName: "argumentFormat", isCollectionItem: false },
                border: { optionName: "border", isCollectionItem: false },
                connector: { optionName: "connector", isCollectionItem: false },
                font: { optionName: "font", isCollectionItem: false },
                format: { optionName: "format", isCollectionItem: false },
                seriesBorder: { optionName: "border", isCollectionItem: false }
            },
        },
    });
};
const Label = Object.assign(_componentLabel, {
    componentType: "option",
});
const _componentLegend = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "legend",
            ExpectedChildren: {
                annotationBorder: { optionName: "border", isCollectionItem: false },
                border: { optionName: "border", isCollectionItem: false },
                font: { optionName: "font", isCollectionItem: false },
                legendTitle: { optionName: "title", isCollectionItem: false },
                margin: { optionName: "margin", isCollectionItem: false },
                title: { optionName: "title", isCollectionItem: false }
            },
            TemplateProps: [{
                    tmplOption: "markerTemplate",
                    render: "markerRender",
                    component: "markerComponent"
                }],
        },
    });
};
const Legend = Object.assign(_componentLegend, {
    componentType: "option",
});
const _componentLegendTitle = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "title",
            ExpectedChildren: {
                font: { optionName: "font", isCollectionItem: false },
                legendTitleSubtitle: { optionName: "subtitle", isCollectionItem: false },
                margin: { optionName: "margin", isCollectionItem: false },
                subtitle: { optionName: "subtitle", isCollectionItem: false }
            },
        },
    });
};
const LegendTitle = Object.assign(_componentLegendTitle, {
    componentType: "option",
});
const _componentLegendTitleSubtitle = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "subtitle",
            ExpectedChildren: {
                font: { optionName: "font", isCollectionItem: false }
            },
        },
    });
};
const LegendTitleSubtitle = Object.assign(_componentLegendTitleSubtitle, {
    componentType: "option",
});
const _componentLoadingIndicator = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "loadingIndicator",
            DefaultsProps: {
                defaultShow: "show"
            },
            ExpectedChildren: {
                font: { optionName: "font", isCollectionItem: false }
            },
        },
    });
};
const LoadingIndicator = Object.assign(_componentLoadingIndicator, {
    componentType: "option",
});
const _componentMargin = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "margin",
        },
    });
};
const Margin = Object.assign(_componentMargin, {
    componentType: "option",
});
const _componentPieChartTitle = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "title",
            ExpectedChildren: {
                font: { optionName: "font", isCollectionItem: false },
                margin: { optionName: "margin", isCollectionItem: false },
                pieChartTitleSubtitle: { optionName: "subtitle", isCollectionItem: false },
                subtitle: { optionName: "subtitle", isCollectionItem: false }
            },
        },
    });
};
const PieChartTitle = Object.assign(_componentPieChartTitle, {
    componentType: "option",
});
const _componentPieChartTitleSubtitle = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "subtitle",
            ExpectedChildren: {
                font: { optionName: "font", isCollectionItem: false }
            },
        },
    });
};
const PieChartTitleSubtitle = Object.assign(_componentPieChartTitleSubtitle, {
    componentType: "option",
});
const _componentSelectionStyle = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "selectionStyle",
            ExpectedChildren: {
                border: { optionName: "border", isCollectionItem: false },
                color: { optionName: "color", isCollectionItem: false },
                hatching: { optionName: "hatching", isCollectionItem: false },
                seriesBorder: { optionName: "border", isCollectionItem: false }
            },
        },
    });
};
const SelectionStyle = Object.assign(_componentSelectionStyle, {
    componentType: "option",
});
const _componentSeries = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "series",
            IsCollectionItem: true,
            ExpectedChildren: {
                border: { optionName: "border", isCollectionItem: false },
                color: { optionName: "color", isCollectionItem: false },
                hoverStyle: { optionName: "hoverStyle", isCollectionItem: false },
                label: { optionName: "label", isCollectionItem: false },
                selectionStyle: { optionName: "selectionStyle", isCollectionItem: false },
                seriesBorder: { optionName: "border", isCollectionItem: false },
                smallValuesGrouping: { optionName: "smallValuesGrouping", isCollectionItem: false }
            },
        },
    });
};
const Series = Object.assign(_componentSeries, {
    componentType: "option",
});
const _componentSeriesBorder = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "border",
        },
    });
};
const SeriesBorder = Object.assign(_componentSeriesBorder, {
    componentType: "option",
});
const _componentSeriesTemplate = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "seriesTemplate",
        },
    });
};
const SeriesTemplate = Object.assign(_componentSeriesTemplate, {
    componentType: "option",
});
const _componentShadow = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "shadow",
        },
    });
};
const Shadow = Object.assign(_componentShadow, {
    componentType: "option",
});
const _componentSize = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "size",
        },
    });
};
const Size = Object.assign(_componentSize, {
    componentType: "option",
});
const _componentSmallValuesGrouping = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "smallValuesGrouping",
        },
    });
};
const SmallValuesGrouping = Object.assign(_componentSmallValuesGrouping, {
    componentType: "option",
});
const _componentSubtitle = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "subtitle",
            ExpectedChildren: {
                font: { optionName: "font", isCollectionItem: false }
            },
        },
    });
};
const Subtitle = Object.assign(_componentSubtitle, {
    componentType: "option",
});
const _componentTitle = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "title",
            ExpectedChildren: {
                font: { optionName: "font", isCollectionItem: false },
                legendTitleSubtitle: { optionName: "subtitle", isCollectionItem: false },
                margin: { optionName: "margin", isCollectionItem: false },
                pieChartTitleSubtitle: { optionName: "subtitle", isCollectionItem: false }
            },
        },
    });
};
const Title = Object.assign(_componentTitle, {
    componentType: "option",
});
const _componentTooltip = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "tooltip",
            ExpectedChildren: {
                argumentFormat: { optionName: "argumentFormat", isCollectionItem: false },
                border: { optionName: "border", isCollectionItem: false },
                font: { optionName: "font", isCollectionItem: false },
                format: { optionName: "format", isCollectionItem: false },
                shadow: { optionName: "shadow", isCollectionItem: false },
                tooltipBorder: { optionName: "border", isCollectionItem: false }
            },
            TemplateProps: [{
                    tmplOption: "contentTemplate",
                    render: "contentRender",
                    component: "contentComponent"
                }],
        },
    });
};
const Tooltip = Object.assign(_componentTooltip, {
    componentType: "option",
});
const _componentTooltipBorder = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "border",
        },
    });
};
const TooltipBorder = Object.assign(_componentTooltipBorder, {
    componentType: "option",
});
export default PieChart;
export { PieChart, AdaptiveLayout, Animation, Annotation, AnnotationBorder, ArgumentFormat, Border, Color, CommonAnnotationSettings, CommonSeriesSettings, Connector, Export, Font, Format, Hatching, HoverStyle, Image, Label, Legend, LegendTitle, LegendTitleSubtitle, LoadingIndicator, Margin, PieChartTitle, PieChartTitleSubtitle, SelectionStyle, Series, SeriesBorder, SeriesTemplate, Shadow, Size, SmallValuesGrouping, Subtitle, Title, Tooltip, TooltipBorder };
