/*!
 * devextreme-react
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

"use client";
import * as React from "react";
import { memo, forwardRef, useImperativeHandle, useRef, useMemo } from "react";
import dxPivotGridFieldChooser from "devextreme/ui/pivot_grid_field_chooser";
import { Component as BaseComponent } from "./core/component";
import NestedOption from "./core/nested-option";
const PivotGridFieldChooser = memo(forwardRef((props, ref) => {
    const baseRef = useRef(null);
    useImperativeHandle(ref, () => ({
        instance() {
            return baseRef.current?.getInstance();
        }
    }), [baseRef.current]);
    const independentEvents = useMemo(() => (["onContentReady", "onContextMenuPreparing", "onDisposing", "onInitialized"]), []);
    const expectedChildren = useMemo(() => ({
        headerFilter: { optionName: "headerFilter", isCollectionItem: false },
        pivotGridFieldChooserTexts: { optionName: "texts", isCollectionItem: false },
        texts: { optionName: "texts", isCollectionItem: false }
    }), []);
    return (React.createElement((BaseComponent), {
        WidgetClass: dxPivotGridFieldChooser,
        ref: baseRef,
        independentEvents,
        expectedChildren,
        ...props,
    }));
}));
const _componentHeaderFilter = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "headerFilter",
            ExpectedChildren: {
                headerFilterTexts: { optionName: "texts", isCollectionItem: false },
                search: { optionName: "search", isCollectionItem: false },
                texts: { optionName: "texts", isCollectionItem: false }
            },
        },
    });
};
const HeaderFilter = Object.assign(_componentHeaderFilter, {
    componentType: "option",
});
const _componentHeaderFilterTexts = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "texts",
        },
    });
};
const HeaderFilterTexts = Object.assign(_componentHeaderFilterTexts, {
    componentType: "option",
});
const _componentPivotGridFieldChooserTexts = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "texts",
        },
    });
};
const PivotGridFieldChooserTexts = Object.assign(_componentPivotGridFieldChooserTexts, {
    componentType: "option",
});
const _componentSearch = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "search",
        },
    });
};
const Search = Object.assign(_componentSearch, {
    componentType: "option",
});
const _componentTexts = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "texts",
        },
    });
};
const Texts = Object.assign(_componentTexts, {
    componentType: "option",
});
export default PivotGridFieldChooser;
export { PivotGridFieldChooser, HeaderFilter, HeaderFilterTexts, PivotGridFieldChooserTexts, Search, Texts };
