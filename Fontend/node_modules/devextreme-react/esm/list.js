/*!
 * devextreme-react
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

"use client";
import * as React from "react";
import { memo, forwardRef, useImperativeHandle, useRef, useMemo } from "react";
import dxList from "devextreme/ui/list";
import { Component as BaseComponent } from "./core/component";
import NestedOption from "./core/nested-option";
const List = memo(forwardRef((props, ref) => {
    const baseRef = useRef(null);
    useImperativeHandle(ref, () => ({
        instance() {
            return baseRef.current?.getInstance();
        }
    }), [baseRef.current]);
    const subscribableOptions = useMemo(() => (["items", "selectedItemKeys", "selectedItems"]), []);
    const independentEvents = useMemo(() => (["onContentReady", "onDisposing", "onGroupRendered", "onInitialized", "onItemClick", "onItemContextMenu", "onItemDeleted", "onItemDeleting", "onItemHold", "onItemRendered", "onItemReordered", "onItemSwipe", "onPageLoading", "onPullRefresh", "onScroll", "onSelectAllValueChanged", "onSelectionChanging"]), []);
    const defaults = useMemo(() => ({
        defaultItems: "items",
        defaultSelectedItemKeys: "selectedItemKeys",
        defaultSelectedItems: "selectedItems",
    }), []);
    const expectedChildren = useMemo(() => ({
        item: { optionName: "items", isCollectionItem: true },
        itemDragging: { optionName: "itemDragging", isCollectionItem: false },
        menuItem: { optionName: "menuItems", isCollectionItem: true },
        searchEditorOptions: { optionName: "searchEditorOptions", isCollectionItem: false }
    }), []);
    const templateProps = useMemo(() => ([
        {
            tmplOption: "groupTemplate",
            render: "groupRender",
            component: "groupComponent"
        },
        {
            tmplOption: "itemTemplate",
            render: "itemRender",
            component: "itemComponent"
        },
    ]), []);
    return (React.createElement((BaseComponent), {
        WidgetClass: dxList,
        ref: baseRef,
        subscribableOptions,
        independentEvents,
        defaults,
        expectedChildren,
        templateProps,
        ...props,
    }));
}));
const _componentButton = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "buttons",
            IsCollectionItem: true,
            ExpectedChildren: {
                options: { optionName: "options", isCollectionItem: false }
            },
        },
    });
};
const Button = Object.assign(_componentButton, {
    componentType: "option",
});
const _componentCursorOffset = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "cursorOffset",
        },
    });
};
const CursorOffset = Object.assign(_componentCursorOffset, {
    componentType: "option",
});
const _componentItem = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "items",
            IsCollectionItem: true,
            TemplateProps: [{
                    tmplOption: "template",
                    render: "render",
                    component: "component"
                }],
        },
    });
};
const Item = Object.assign(_componentItem, {
    componentType: "option",
});
const _componentItemDragging = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "itemDragging",
            ExpectedChildren: {
                cursorOffset: { optionName: "cursorOffset", isCollectionItem: false }
            },
            TemplateProps: [{
                    tmplOption: "dragTemplate",
                    render: "dragRender",
                    component: "dragComponent"
                }],
        },
    });
};
const ItemDragging = Object.assign(_componentItemDragging, {
    componentType: "option",
});
const _componentMenuItem = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "menuItems",
            IsCollectionItem: true,
        },
    });
};
const MenuItem = Object.assign(_componentMenuItem, {
    componentType: "option",
});
const _componentOptions = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "options",
            TemplateProps: [{
                    tmplOption: "template",
                    render: "render",
                    component: "component"
                }],
        },
    });
};
const Options = Object.assign(_componentOptions, {
    componentType: "option",
});
const _componentSearchEditorOptions = (props) => {
    return React.createElement((NestedOption), {
        ...props,
        elementDescriptor: {
            OptionName: "searchEditorOptions",
            DefaultsProps: {
                defaultValue: "value"
            },
            ExpectedChildren: {
                button: { optionName: "buttons", isCollectionItem: true }
            },
        },
    });
};
const SearchEditorOptions = Object.assign(_componentSearchEditorOptions, {
    componentType: "option",
});
export default List;
export { List, Button, CursorOffset, Item, ItemDragging, MenuItem, Options, SearchEditorOptions };
