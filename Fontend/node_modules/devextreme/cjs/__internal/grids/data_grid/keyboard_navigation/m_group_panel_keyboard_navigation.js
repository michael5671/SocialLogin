/**
 * DevExtreme (cjs/__internal/grids/data_grid/keyboard_navigation/m_group_panel_keyboard_navigation.js)
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.GroupPanelKeyboardNavigationController = void 0;
var _click = require("../../../../common/core/events/click");
var _events_engine = _interopRequireDefault(require("../../../../common/core/events/core/events_engine"));
var _index = require("../../../../common/core/events/utils/index");
var _renderer = _interopRequireDefault(require("../../../../core/renderer"));
var _accessibility = require("../../../../ui/shared/accessibility");
var _const = require("../../../grids/grid_core/keyboard_navigation/const");
var _m_column_keyboard_navigation_core = require("../../../grids/grid_core/keyboard_navigation/m_column_keyboard_navigation_core");
var _const2 = require("../grouping/const");
var _m_core = _interopRequireDefault(require("../m_core"));
var _m_column_keyboard_navigation_mixin = require("./m_column_keyboard_navigation_mixin");

function _interopRequireDefault(e) {
    return e && e.__esModule ? e : {
        default: e
    }
}
class GroupPanelKeyboardNavigationController extends((0, _m_column_keyboard_navigation_mixin.ColumnKeyboardNavigationMixin)(_m_column_keyboard_navigation_core.ColumnKeyboardNavigationController)) {
    constructor() {
        super(...arguments);
        this.isNeedToHiddenFocusAfterClick = false
    }
    groupItemClickHandler(e) {
        var _this$_columnsControl;
        const $groupedColumnElement = (0, _renderer.default)(e.originalEvent.target);
        const groupColumn = this._columnsController.columnOption(`groupIndex:${$groupedColumnElement.index()}`);
        this.isNeedToHiddenFocusAfterClick = null === (_this$_columnsControl = this._columnsController) || void 0 === _this$_columnsControl ? void 0 : _this$_columnsControl.allowColumnSorting(groupColumn)
    }
    unsubscribeFromGroupItemClick() {
        const $focusedView = this.getFocusedViewElement();
        if ($focusedView) {
            _events_engine.default.off($focusedView, _click.name, this.groupItemClickHandlerContext)
        }
    }
    subscribeToGroupItemClick() {
        const $focusedView = this.getFocusedViewElement();
        if ($focusedView) {
            _events_engine.default.on($focusedView, _click.name, `.${_const2.CLASSES.groupPanelItem}`, this.groupItemClickHandlerContext)
        }
    }
    leftRightKeysHandler(e) {
        const {
            originalEvent: originalEvent
        } = e;
        if ((0, _index.isCommandKeyPressed)(originalEvent)) {
            const $groupedColumnElement = (0, _renderer.default)(originalEvent.target);
            const column = this._columnsController.columnOption(`groupIndex:${$groupedColumnElement.index()}`);
            const direction = this.getDirectionByKeyName(e.keyName);
            if (this.canReorderColumn(column, direction)) {
                this.moveColumn(column, direction)
            }
            null === originalEvent || void 0 === originalEvent || originalEvent.preventDefault()
        }
    }
    getVisibleIndex(column) {
        return column.groupIndex
    }
    getColumnFromEvent(e) {
        const $groupedColumnElement = (0, _renderer.default)(e.originalEvent.target);
        return this._columnsController.columnOption(`groupIndex:${$groupedColumnElement.index()}`)
    }
    getNewFocusedColumnBeforeUngrouping(column) {
        const visibleColumnIndex = column.groupIndex;
        const groupColumns = this._columnsController.getGroupColumns();
        return visibleColumnIndex === groupColumns.length - 1 ? groupColumns[visibleColumnIndex - 1] : groupColumns[visibleColumnIndex + 1]
    }
    _getCell(cellPosition) {
        var _this$headerPanel;
        const $groupColumnElements = null === (_this$headerPanel = this.headerPanel) || void 0 === _this$headerPanel ? void 0 : _this$headerPanel.getColumnElements();
        return null === $groupColumnElements || void 0 === $groupColumnElements ? void 0 : $groupColumnElements.eq(cellPosition.columnIndex)
    }
    getFocusedView() {
        return this.getView("headerPanel")
    }
    getFocusedViewElement() {
        var _this$headerPanel2;
        return null === (_this$headerPanel2 = this.headerPanel) || void 0 === _this$headerPanel2 || null === (_this$headerPanel2 = _this$headerPanel2.element()) || void 0 === _this$headerPanel2 ? void 0 : _this$headerPanel2.find(`.${_const2.CLASSES.groupPanel}`)
    }
    getFocusinSelector() {
        return `.${_const2.CLASSES.groupPanelItem}`
    }
    focusinHandler(e) {
        this.setFocusedCellPosition(0, (0, _renderer.default)(e.target).index())
    }
    keyDownHandler(e) {
        let isHandled = super.keyDownHandler(e);
        if (isHandled) {
            return true
        }
        if ("leftArrow" === e.keyName || "rightArrow" === e.keyName) {
            this.leftRightKeysHandler(e);
            isHandled = true
        }
        return isHandled
    }
    renderCompleted(e) {
        const {
            needToRestoreFocus: needToRestoreFocus
        } = this;
        super.renderCompleted(e);
        this.unsubscribeFromGroupItemClick();
        this.subscribeToGroupItemClick();
        if (!needToRestoreFocus && this.isNeedToHiddenFocusAfterClick) {
            const $focusElement = this._getFocusedCell();
            if (null !== $focusElement && void 0 !== $focusElement && $focusElement.length) {
                (0, _accessibility.hiddenFocus)($focusElement.get(0))
            }
            this.isNeedToHiddenFocusAfterClick = false
        }
    }
    canUngroupColumnByPressingKey(e) {
        return super.canUngroupColumnByPressingKey(e) || "backspace" === e.keyName || "del" === e.keyName
    }
    getFirstFocusableVisibleIndex() {
        var _this$headerPanel3;
        const columns = null === (_this$headerPanel3 = this.headerPanel) || void 0 === _this$headerPanel3 ? void 0 : _this$headerPanel3.getColumns();
        return null !== columns && void 0 !== columns && columns.length ? 0 : -1
    }
    init() {
        this.headerPanel = this.getView("headerPanel");
        this.groupItemClickHandlerContext = this.groupItemClickHandlerContext ?? this.groupItemClickHandler.bind(this);
        super.init()
    }
    canReorderColumn(groupColumn, direction) {
        const allowDragging = this.headerPanel.allowDragging(groupColumn);
        if (!allowDragging) {
            return false
        }
        const groupedColumns = this._columnsController.getGroupColumns();
        return direction === _const.Direction.Next ? groupColumn.groupIndex !== groupedColumns.length - 1 : 0 !== groupColumn.groupIndex
    }
    ungroupAllColumns() {
        this.updateViewFocusPosition();
        super.ungroupAllColumns()
    }
}
exports.GroupPanelKeyboardNavigationController = GroupPanelKeyboardNavigationController;
_m_core.default.registerModule("groupPanelKeyboardNavigation", {
    controllers: {
        groupPanelKeyboardNavigation: GroupPanelKeyboardNavigationController
    }
});
