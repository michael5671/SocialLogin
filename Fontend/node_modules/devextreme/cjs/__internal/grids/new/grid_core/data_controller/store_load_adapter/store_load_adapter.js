/**
 * DevExtreme (cjs/__internal/grids/new/grid_core/data_controller/store_load_adapter/store_load_adapter.js)
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.StoreLoadAdapter = void 0;
var _deferred = require("../../../../../../core/utils/deferred");
var _deferred_cache = require("../deferred_cache");
var _utils = require("../utils");
class StoreLoadAdapter {
    constructor(dataSourceReactive, localLoadOptionsReactive, localStoreFabric) {
        this.dataSourceReactive = dataSourceReactive;
        this.localLoadOptionsReactive = localLoadOptionsReactive;
        this.localStoreFabric = localStoreFabric;
        this.loadFromStore = (0, _deferred_cache.deferredCache)((loadOptions => {
            const dataSource = this.dataSourceReactive.peek();
            return dataSource.store().load(loadOptions)
        }))
    }
    load() {
        let loadOptions = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        const result = (0, _deferred.Deferred)();
        const {
            localOptions: localOptions,
            remoteOptions: remoteOptions
        } = this.getLoadOptions(loadOptions);
        this.loadFromStore(remoteOptions).done((loadedData => {
            const localStore = this.localStoreFabric(loadedData);
            localStore.load(localOptions).done((processedData => {
                result.resolve(processedData)
            })).fail(result.reject)
        })).fail(result.reject);
        return result
    }
    getLocalLoadOperations() {
        return this.localLoadOptionsReactive.peek()
    }
    getLoadOptions(loadOptions) {
        const localLoadOptions = this.localLoadOptionsReactive.peek();
        const localOptions = (0, _utils.getLocalLoadOptions)(loadOptions, localLoadOptions);
        const remoteOptions = (0, _utils.getStoreLoadOptions)(loadOptions, localLoadOptions);
        return {
            localOptions: localOptions,
            remoteOptions: remoteOptions
        }
    }
}
exports.StoreLoadAdapter = StoreLoadAdapter;
