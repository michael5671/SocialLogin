/**
 * DevExtreme (cjs/__internal/grids/new/grid_core/filtering/filter_sync/utils.js)
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.mergeFilterPanelWithHeaderFilterValues = exports.getFilterValues = exports.getFilterType = exports.getConditionFromHeaderFilter = void 0;
var _m_utils = require("../../../../../filter_builder/m_utils");
const getFilterValues = filterConditions => {
    if (1 !== filterConditions.length) {
        return
    }
    const filterCondition = filterConditions[0];
    if (!filterCondition) {
        return
    }
    const value = filterCondition[2];
    const hasArrayValue = Array.isArray(value);
    return hasArrayValue ? value : [value]
};
exports.getFilterValues = getFilterValues;
const getFilterType = filterConditions => {
    if (1 !== filterConditions.length) {
        return
    }
    const filterCondition = filterConditions[0];
    if (!filterCondition) {
        return
    }
    const selectedFilterOperation = filterCondition[1];
    switch (selectedFilterOperation) {
        case "anyof":
        case "=":
            return "include";
        case "noneof":
        case "<>":
            return "exclude";
        default:
            return
    }
};
exports.getFilterType = getFilterType;
const getConditionFromHeaderFilter = _ref => {
    let {
        type: type,
        columnId: columnId,
        filterType: filterType,
        filterValues: filterValues
    } = _ref;
    const [firstFilterItem] = filterValues;
    switch (true) {
        case "single-value" === type && "exclude" === filterType:
            return [columnId, "<>", firstFilterItem];
        case "single-value" === type && "include" === filterType:
            return [columnId, "=", firstFilterItem];
        case "values-or-condition" === type && "exclude" === filterType:
            return [columnId, "noneof", filterValues];
        case "values-or-condition" === type && "include" === filterType:
            return [columnId, "anyof", filterValues];
        default:
            return null
    }
};
exports.getConditionFromHeaderFilter = getConditionFromHeaderFilter;
const mergeFilterPanelWithHeaderFilterValues = (filterPanelValue, headerFilterInfoArray) => headerFilterInfoArray.reduce(((result, info) => {
    const value = getConditionFromHeaderFilter(info);
    return value ? (0, _m_utils.syncFilters)(result, value) : (0, _m_utils.removeFieldConditionsFromFilter)(result, info.columnId)
}), filterPanelValue);
exports.mergeFilterPanelWithHeaderFilterValues = mergeFilterPanelWithHeaderFilterValues;
