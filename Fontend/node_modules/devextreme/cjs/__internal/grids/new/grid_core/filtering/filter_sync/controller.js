/**
 * DevExtreme (cjs/__internal/grids/new/grid_core/filtering/filter_sync/controller.js)
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FilterSyncController = void 0;
var _common = require("../../../../../../core/utils/common");
var _signalsCore = require("@preact/signals-core");
var _m_utils = require("../../../../../filter_builder/m_utils");
var _index = require("../../../../../grids/new/grid_core/search/index");
var _index2 = require("../../columns_controller/index");
var _utils = require("../../columns_controller/utils");
var _index3 = require("../header_filter/index");
var _utils2 = require("../header_filter/utils");
var _index4 = require("../index");
var _utils3 = require("./utils");

function _extends() {
    return _extends = Object.assign ? Object.assign.bind() : function(n) {
        for (var e = 1; e < arguments.length; e++) {
            var t = arguments[e];
            for (var r in t) {
                ({}).hasOwnProperty.call(t, r) && (n[r] = t[r])
            }
        }
        return n
    }, _extends.apply(null, arguments)
}
const FILTER_DEEP_COMPARISON_OPTS = {
    maxDepth: 6,
    strict: true
};
class FilterSyncController {
    constructor(columnsController, filterController, headerFilterController, searchController) {
        this.columnsController = columnsController;
        this.filterController = filterController;
        this.headerFilterController = headerFilterController;
        this.searchController = searchController;
        this.previousFilterPanelValue = null;
        this.previousFilterPanelEnabled = this.filterController.filterPanelFilterEnabled.peek();
        this.previousHeaderFilterInfoArray = [];
        (0, _signalsCore.effect)((() => {
            const filterPanelValue = this.filterController.filterValueOption.value;
            const isFilterPanelEnabled = this.filterController.filterPanelFilterEnabled.value;
            if ((0, _common.equalByValue)(this.previousFilterPanelValue, filterPanelValue, FILTER_DEEP_COMPARISON_OPTS) && this.previousFilterPanelEnabled === isFilterPanelEnabled) {
                return
            }
            this.previousFilterPanelValue = filterPanelValue;
            this.previousFilterPanelEnabled = isFilterPanelEnabled;
            const isSyncEnabled = this.filterController.filterSyncEnabled.peek();
            if (!isSyncEnabled) {
                return
            }
            if (!isFilterPanelEnabled || null === filterPanelValue) {
                this.headerFilterController.clearHeaderFilters();
                this.previousHeaderFilterInfoArray = this.headerFilterController.headerFilterInfoArray.peek();
                return
            }
            this.handleFilterPanelSync(filterPanelValue);
            this.previousHeaderFilterInfoArray = this.headerFilterController.headerFilterInfoArray.peek()
        }));
        (0, _signalsCore.effect)((() => {
            const headerFilterInfoArray = this.headerFilterController.headerFilterInfoArray.value;
            if ((0, _common.equalByValue)(this.previousHeaderFilterInfoArray, headerFilterInfoArray, FILTER_DEEP_COMPARISON_OPTS)) {
                return
            }
            this.previousHeaderFilterInfoArray = headerFilterInfoArray;
            const isSyncEnabled = this.filterController.filterSyncEnabled.peek();
            if (!isSyncEnabled) {
                return
            }
            const filterPanelValue = this.filterController.filterPanelValue.peek() ?? [];
            const newFilterPanelValue = (0, _utils3.mergeFilterPanelWithHeaderFilterValues)(filterPanelValue, headerFilterInfoArray);
            if ((0, _common.equalByValue)(filterPanelValue, newFilterPanelValue, FILTER_DEEP_COMPARISON_OPTS)) {
                return
            }
            this.handleHeaderFilterSync(newFilterPanelValue);
            this.previousFilterPanelValue = newFilterPanelValue
        }))
    }
    clearFilters() {
        (0, _signalsCore.batch)((() => {
            this.searchController.searchTextOption.value = "";
            this.filterController.filterValueOption.value = null;
            this.headerFilterController.clearHeaderFilters()
        }))
    }
    handleFilterPanelSync(filterPanelValue) {
        const sourceColumns = this.columnsController.columns.peek();
        this.columnsController.updateColumns((columns => columns.map((column => {
            const sourceColumn = (0, _utils.getColumnByIndexOrName)(sourceColumns, column.name);
            if (!(0, _utils2.isColumnFilterable)(sourceColumn)) {
                return column
            }
            const columnId = (0, _utils2.getColumnIdentifier)(column);
            const filterConditions = (0, _m_utils.getMatchedConditions)(filterPanelValue, columnId);
            const filterType = (0, _utils3.getFilterType)(filterConditions);
            const filterValues = filterType ? (0, _utils3.getFilterValues)(filterConditions) : void 0;
            return _extends({}, column, {
                filterType: filterType,
                filterValues: filterValues
            })
        }))))
    }
    handleHeaderFilterSync(newFilterPanelValue) {
        const normalizedValue = !(null !== newFilterPanelValue && void 0 !== newFilterPanelValue && newFilterPanelValue.length) ? null : newFilterPanelValue;
        (0, _signalsCore.batch)((() => {
            this.filterController.filterValueOption.value = normalizedValue;
            this.filterController.filterPanelFilterEnabled.value = true
        }))
    }
}
exports.FilterSyncController = FilterSyncController;
FilterSyncController.dependencies = [_index2.ColumnsController, _index4.FilterController, _index3.HeaderFilterController, _index.SearchController];
