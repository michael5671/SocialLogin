/**
 * DevExtreme (cjs/__internal/grids/new/grid_core/keyboard_navigation/controller.js)
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.KeyboardNavigationController = void 0;
var _element = require("../../../../../core/element");
var _renderer = _interopRequireDefault(require("../../../../../core/renderer"));
var _options_controller = require("../../../../grids/new/grid_core/options_controller/options_controller");

function _interopRequireDefault(e) {
    return e && e.__esModule ? e : {
        default: e
    }
}
class KeyboardNavigationController {
    constructor(options) {
        this.options = options;
        this.enabled = this.options.oneWay("keyboardNavigation.enabled")
    }
    setReturnFocusTo(element) {
        this.returnFocusTo = element
    }
    setFirstCardElement(element) {
        this.firstCardElement = element
    }
    returnFocus() {
        if (!this.returnFocusTo) {
            return
        }
        if (this.returnFocusTo.isConnected) {
            this.returnFocusTo.focus()
        } else {
            var _this$firstCardElemen;
            null === (_this$firstCardElemen = this.firstCardElement) || void 0 === _this$firstCardElemen || _this$firstCardElemen.focus()
        }
        this.returnFocusTo = void 0
    }
    onKeyDown(event) {
        const action = this.options.action("onKeyDown").peek();
        action({
            handled: event.dxHandled ?? false,
            event: event,
            element: (0, _element.getPublicElement)((0, _renderer.default)(event.target))
        })
    }
    onFocusedCardChanged(card, cardIdx, element) {
        const action = this.options.action("onFocusedCardChanged").peek();
        action({
            cardIndex: cardIdx,
            card: card,
            cardElement: (0, _element.getPublicElement)((0, _renderer.default)(element))
        })
    }
}
exports.KeyboardNavigationController = KeyboardNavigationController;
KeyboardNavigationController.dependencies = [_options_controller.OptionsController];
