/**
 * DevExtreme (cjs/__internal/grids/new/grid_core/keyboard_navigation/kbn_navigation_container.js)
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.KbnNavigationContainerEnabled = exports.KbnNavigationContainerDisabled = exports.KbnNavigationContainer = void 0;
var _inferno = require("inferno");
var _index = require("../../../../grids/new/grid_core/core/events/index");
const _excluded = ["elementRef", "navigationStrategy", "children"],
    _excluded2 = ["navigationStrategy", "elementRef", "children"],
    _excluded3 = ["enabled", "ref"];

function _extends() {
    return _extends = Object.assign ? Object.assign.bind() : function(n) {
        for (var e = 1; e < arguments.length; e++) {
            var t = arguments[e];
            for (var r in t) {
                ({}).hasOwnProperty.call(t, r) && (n[r] = t[r])
            }
        }
        return n
    }, _extends.apply(null, arguments)
}

function _objectWithoutPropertiesLoose(r, e) {
    if (null == r) {
        return {}
    }
    var t = {};
    for (var n in r) {
        if ({}.hasOwnProperty.call(r, n)) {
            if (e.includes(n)) {
                continue
            }
            t[n] = r[n]
        }
    }
    return t
}
var __decorate = (void 0, function(decorators, target, key, desc) {
    var d, c = arguments.length,
        r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
        r = Reflect.decorate(decorators, target, key, desc)
    } else {
        for (var i = decorators.length - 1; i >= 0; i--) {
            if (d = decorators[i]) {
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r
            }
        }
    }
    return c > 3 && r && Object.defineProperty(target, key, r), r
});
var __metadata = (void 0, function(k, v) {
    if ("object" === typeof Reflect && "function" === typeof Reflect.metadata) {
        return Reflect.metadata(k, v)
    }
});
const KbnNavigationContainerDisabled = props => {
    const {
        elementRef: elementRef,
        children: children
    } = props, restProps = _objectWithoutPropertiesLoose(props, _excluded);
    return (0, _inferno.normalizeProps)((0, _inferno.createVNode)(1, "div", null, [(0, _inferno.createVNode)(1, "div", null, null, 1, {
        "data-dx-focus-decoy": false
    }), children, (0, _inferno.createVNode)(1, "div", null, null, 1, {
        "data-dx-focus-decoy": false
    })], 0, _extends({}, restProps, {
        "data-dx-focus-container": false
    }), null, elementRef))
};
exports.KbnNavigationContainerDisabled = KbnNavigationContainerDisabled;
class KbnNavigationContainerEnabled extends _inferno.Component {
    constructor() {
        super(...arguments);
        this.elementRef = (0, _inferno.createRef)();
        this.firstFocusDecoyRef = (0, _inferno.createRef)();
        this.lastFocusDecoyRef = (0, _inferno.createRef)();
        this.eventListener = new _index.NativeEventListener
    }
    componentDidMount() {
        const elementRef = this.getActualRef();
        this.eventListener.add(elementRef, "focusout", this.onFocusOut.bind(this)).add(this.firstFocusDecoyRef, "focusin", this.onDecoyFocusIn.bind(this)).add(this.lastFocusDecoyRef, "focusin", this.onDecoyFocusIn.bind(this))
    }
    componentDidUpdate() {
        this.props.navigationStrategy.normalizeActiveIdx()
    }
    componentWillUnmount() {
        this.eventListener.unsubscribe()
    }
    render() {
        const _this$props = this.props,
            {
                navigationStrategy: navigationStrategy,
                children: children
            } = _this$props,
            restProps = _objectWithoutPropertiesLoose(_this$props, _excluded2);
        const ref = this.getActualRef();
        navigationStrategy.clear();
        return (0, _inferno.normalizeProps)((0, _inferno.createVNode)(1, "div", null, [(0, _inferno.createVNode)(1, "div", null, null, 1, {
            "data-dx-focus-decoy": true,
            tabindex: 0
        }, null, this.firstFocusDecoyRef), children, (0, _inferno.createVNode)(1, "div", null, null, 1, {
            "data-dx-focus-decoy": true,
            tabindex: 0
        }, null, this.lastFocusDecoyRef)], 0, _extends({}, restProps, {
            onKeyDown: this.onKeyDown.bind(this),
            "data-dx-focus-container": true
        }), null, ref))
    }
    onKeyDown(event) {
        const {
            navigationStrategy: navigationStrategy,
            onKeyDown: onKeyDown
        } = this.props;
        const elementRef = this.getActualRef();
        if ("Tab" === event.key) {
            var _elementRef$current;
            navigationStrategy.setActiveItem(0, false);
            null === (_elementRef$current = elementRef.current) || void 0 === _elementRef$current || _elementRef$current.setAttribute("inert", "");
            _index.eventUtils.markHandled(event)
        }
        null === onKeyDown || void 0 === onKeyDown || onKeyDown(event)
    }
    onFocusOut() {
        var _elementRef$current2;
        const elementRef = this.getActualRef();
        null === (_elementRef$current2 = elementRef.current) || void 0 === _elementRef$current2 || _elementRef$current2.removeAttribute("inert")
    }
    onDecoyFocusIn() {
        const {
            navigationStrategy: navigationStrategy,
            onFocusMoved: onFocusMoved
        } = this.props;
        navigationStrategy.setActiveItem(0, true);
        const nextActiveItem = navigationStrategy.getActiveItem();
        if (nextActiveItem) {
            null === onFocusMoved || void 0 === onFocusMoved || onFocusMoved(nextActiveItem.idx, nextActiveItem.element)
        }
    }
    getActualRef() {
        return this.props.elementRef ?? this.elementRef
    }
}
exports.KbnNavigationContainerEnabled = KbnNavigationContainerEnabled;
__decorate([_index.eventHandler, __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", void 0)], KbnNavigationContainerEnabled.prototype, "onKeyDown", null);
__decorate([_index.eventHandler, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], KbnNavigationContainerEnabled.prototype, "onFocusOut", null);
__decorate([_index.eventHandler, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], KbnNavigationContainerEnabled.prototype, "onDecoyFocusIn", null);
const KbnNavigationContainer = props => {
    const {
        enabled: enabled
    } = props, restProps = _objectWithoutPropertiesLoose(props, _excluded3);
    return enabled ? (0, _inferno.normalizeProps)((0, _inferno.createComponentVNode)(2, KbnNavigationContainerEnabled, _extends({}, restProps))) : (0, _inferno.normalizeProps)((0, _inferno.createComponentVNode)(2, KbnNavigationContainerDisabled, _extends({}, restProps)))
};
exports.KbnNavigationContainer = KbnNavigationContainer;
