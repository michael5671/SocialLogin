/**
 * DevExtreme (esm/__internal/grids/grid_core/keyboard_navigation/m_column_keyboard_navigation_core.js)
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
import {
    isDefined,
    isEmptyObject
} from "../../../../core/utils/type";
import {
    Direction
} from "./const";
import {
    KeyboardNavigationController as KeyboardNavigationControllerCore
} from "./m_keyboard_navigation_core";
export class ColumnKeyboardNavigationController extends KeyboardNavigationControllerCore {
    keyDownHandler(e) {
        return this.processOnKeyDown(e)
    }
    getVisibleIndex(column, rowIndex) {
        const visibleIndex = this._columnsController.getVisibleIndex(column.index, rowIndex);
        const columnIndexOffset = this.getColumnIndexOffset(visibleIndex);
        return visibleIndex >= 0 ? visibleIndex + columnIndexOffset : -1
    }
    getNewVisibleIndex(visibleIndex, rowIndex, direction) {
        return "previous" === direction ? visibleIndex - 1 : visibleIndex + 2
    }
    getNewFocusedColumnIndex(newVisibleIndex, direction) {
        return direction === Direction.Next ? newVisibleIndex - 1 : newVisibleIndex
    }
    resizeCompleted() {
        if (this.needToRestoreFocus) {
            this.restoreFocus()
        }
    }
    resetFocusedCellPosition() {
        this._focusedCellPosition = {}
    }
    canReorderColumn(column, direction, rowIndex) {
        return false
    }
    init() {
        var _this$columnFocusDisp;
        super.init();
        this.columnFocusDispatcher = this.getController("columnFocusDispatcher");
        null === (_this$columnFocusDisp = this.columnFocusDispatcher) || void 0 === _this$columnFocusDisp || _this$columnFocusDisp.registerKeyboardNavigationController(this)
    }
    moveColumn(column) {
        let direction = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Direction.Next;
        let rowIndex = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
        const viewName = this.getFocusedView().getName();
        const visibleIndex = this.getVisibleIndex(column, rowIndex);
        const newVisibleIndex = this.getNewVisibleIndex(visibleIndex, rowIndex, direction);
        const newFocusedColumnIndex = this.getNewFocusedColumnIndex(newVisibleIndex, direction);
        this.updateViewFocusPosition({
            rowIndex: rowIndex,
            columnIndex: newFocusedColumnIndex
        });
        this._columnsController.moveColumn({
            columnIndex: visibleIndex,
            rowIndex: rowIndex
        }, {
            columnIndex: newVisibleIndex,
            rowIndex: rowIndex
        }, viewName, viewName)
    }
    getFirstFocusableVisibleIndex() {
        return -1
    }
    updateViewFocusPosition(cellPosition) {
        var _this$columnFocusDisp2;
        null === (_this$columnFocusDisp2 = this.columnFocusDispatcher) || void 0 === _this$columnFocusDisp2 || _this$columnFocusDisp2.updateFocusPosition(this, cellPosition)
    }
    updateFocusPosition(cellPosition) {
        this.needToRestoreFocus = true;
        if (isDefined(cellPosition)) {
            this.setFocusedCellPosition(cellPosition.rowIndex, cellPosition.columnIndex)
        } else {
            this.resetFocusedCellPosition()
        }
    }
    restoreViewFocus() {
        var _this$columnFocusDisp3;
        null === (_this$columnFocusDisp3 = this.columnFocusDispatcher) || void 0 === _this$columnFocusDisp3 || _this$columnFocusDisp3.restoreFocus(this)
    }
    restoreFocus() {
        var _$focusedCell$;
        this.needToRestoreFocus = false;
        if (isEmptyObject(this._focusedCellPosition)) {
            this.setFocusedCellPosition(0, this.getFirstFocusableVisibleIndex())
        }
        const $focusedCell = this._getFocusedCell();
        null === $focusedCell || void 0 === $focusedCell || null === (_$focusedCell$ = $focusedCell[0]) || void 0 === _$focusedCell$ || _$focusedCell$.focus({
            preventScroll: true
        })
    }
}
