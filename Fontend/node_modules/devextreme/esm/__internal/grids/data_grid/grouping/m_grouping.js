/**
 * DevExtreme (esm/__internal/grids/data_grid/grouping/m_grouping.js)
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
import messageLocalization from "../../../../common/core/localization/message";
import devices from "../../../../core/devices";
import $ from "../../../../core/renderer";
import {
    Deferred,
    when
} from "../../../../core/utils/deferred";
import {
    each
} from "../../../../core/utils/iterator";
import {
    getHeight
} from "../../../../core/utils/size";
import {
    isDefined,
    isString
} from "../../../../core/utils/type";
import {
    restoreFocus,
    setTabIndex
} from "../../../../ui/shared/accessibility";
import {
    ColumnContextMenuMixin
} from "../../../grids/grid_core/context_menu/m_column_context_menu_mixin";
import {
    registerKeyboardAction
} from "../../../grids/grid_core/m_accessibility";
import gridCore from "../m_core";
import dataSourceAdapterProvider from "../m_data_source_adapter";
import {
    CLASSES,
    CONTEXT_MENU_GROUP_BY_COLUMN_ICON_NAME,
    CONTEXT_MENU_UNGROUP_ALL_COLUMNS_ICON_NAME,
    CONTEXT_MENU_UNGROUP_COLUMN_ICON_NAME
} from "./const";
import {
    GroupingHelper as CollapsedGroupingHelper
} from "./m_grouping_collapsed";
import {
    GroupingHelper as ExpandedGroupingHelper
} from "./m_grouping_expanded";
const DATAGRID_EXPAND_CLASS = "dx-datagrid-expand";
const DATAGRID_GROUP_ROW_CLASS = "dx-group-row";
const HEADER_FILTER_CLASS_SELECTOR = ".dx-header-filter";
const dataSourceAdapterExtender = Base => class extends Base {
    init() {
        super.init.apply(this, arguments);
        this._initGroupingHelper()
    }
    _initGroupingHelper(options) {
        const grouping = this._grouping;
        const isAutoExpandAll = this.option("grouping.autoExpandAll");
        const isFocusedRowEnabled = this.option("focusedRowEnabled");
        const remoteOperations = options ? options.remoteOperations : this.remoteOperations();
        const isODataRemoteOperations = remoteOperations.filtering && remoteOperations.sorting && remoteOperations.paging;
        if (isODataRemoteOperations && !remoteOperations.grouping && (isAutoExpandAll || !isFocusedRowEnabled)) {
            if (!grouping || grouping instanceof CollapsedGroupingHelper) {
                this._grouping = new ExpandedGroupingHelper(this)
            }
        } else if (!grouping || grouping instanceof ExpandedGroupingHelper) {
            this._grouping = new CollapsedGroupingHelper(this)
        }
    }
    totalItemsCount() {
        const totalCount = super.totalItemsCount();
        return totalCount > 0 && this._dataSource.group() && this._dataSource.requireTotalCount() ? totalCount + this._grouping.totalCountCorrection() : totalCount
    }
    itemsCount() {
        return this._dataSource.group() ? this._grouping.itemsCount() || 0 : super.itemsCount.apply(this, arguments)
    }
    allowCollapseAll() {
        return this._grouping.allowCollapseAll()
    }
    isGroupItemCountable(item) {
        return this._grouping.isGroupItemCountable(item)
    }
    isRowExpanded(key) {
        const groupInfo = this._grouping.findGroupInfo(key);
        return groupInfo ? groupInfo.isExpanded : !this._grouping.allowCollapseAll()
    }
    collapseAll(groupIndex) {
        return this._collapseExpandAll(groupIndex, false)
    }
    expandAll(groupIndex) {
        return this._collapseExpandAll(groupIndex, true)
    }
    _collapseExpandAll(groupIndex, isExpand) {
        const that = this;
        const dataSource = that._dataSource;
        const group = dataSource.group();
        const groups = gridCore.normalizeSortingInfo(group || []);
        if (groups.length) {
            for (let i = 0; i < groups.length; i++) {
                if (void 0 === groupIndex || groupIndex === i) {
                    groups[i].isExpanded = isExpand
                } else if (null !== group && void 0 !== group && group[i]) {
                    groups[i].isExpanded = group[i].isExpanded
                }
            }
            dataSource.group(groups);
            that._grouping.foreachGroups(((groupInfo, parents) => {
                if (void 0 === groupIndex || groupIndex === parents.length - 1) {
                    groupInfo.isExpanded = isExpand
                }
            }), false, true);
            that.resetPagesCache()
        }
        return true
    }
    refresh() {
        super.refresh.apply(this, arguments);
        return this._grouping.refresh.apply(this._grouping, arguments)
    }
    changeRowExpand(path) {
        const that = this;
        const dataSource = that._dataSource;
        if (dataSource.group()) {
            dataSource.beginLoading();
            if (that._lastLoadOptions) {
                that._lastLoadOptions.groupExpand = true
            }
            return that._changeRowExpandCore(path).always((() => {
                dataSource.endLoading()
            }))
        }
    }
    _changeRowExpandCore(path) {
        return this._grouping.changeRowExpand(path)
    }
    _hasGroupLevelsExpandState(group, isExpanded) {
        if (group && Array.isArray(group)) {
            for (let i = 0; i < group.length; i++) {
                if (group[i].isExpanded === isExpanded) {
                    return true
                }
            }
        }
    }
    _customizeRemoteOperations(options, operationTypes) {
        const {
            remoteOperations: remoteOperations
        } = options;
        if (options.storeLoadOptions.group) {
            if (remoteOperations.grouping && !options.isCustomLoading) {
                if (!remoteOperations.groupPaging || this._hasGroupLevelsExpandState(options.storeLoadOptions.group, true)) {
                    remoteOperations.paging = false
                }
            }
            if (!remoteOperations.grouping && (!remoteOperations.sorting || !remoteOperations.filtering || options.isCustomLoading || this._hasGroupLevelsExpandState(options.storeLoadOptions.group, false))) {
                remoteOperations.paging = false
            }
        } else if (!options.isCustomLoading && remoteOperations.paging && operationTypes.grouping) {
            this.resetCache()
        }
        super._customizeRemoteOperations.apply(this, arguments)
    }
    _handleDataLoading(options) {
        super._handleDataLoading(options);
        this._initGroupingHelper(options);
        return this._grouping.handleDataLoading(options)
    }
    _handleDataLoaded(options) {
        return this._grouping.handleDataLoaded(options, super._handleDataLoaded.bind(this))
    }
    _handleDataLoadedCore(options) {
        return this._grouping.handleDataLoadedCore(options, super._handleDataLoadedCore.bind(this))
    }
};
dataSourceAdapterProvider.extend(dataSourceAdapterExtender);
const GroupingDataControllerExtender = Base => class extends Base {
    init() {
        super.init();
        this.createAction("onRowExpanding");
        this.createAction("onRowExpanded");
        this.createAction("onRowCollapsing");
        this.createAction("onRowCollapsed")
    }
    _beforeProcessItems(items) {
        const groupColumns = this._columnsController.getGroupColumns();
        items = super._beforeProcessItems(items);
        if (items.length && groupColumns.length) {
            items = this._processGroupItems(items, groupColumns.length)
        }
        return items
    }
    _processItem(item, options) {
        if (isDefined(item.groupIndex) && isString(item.rowType) && 0 === item.rowType.indexOf("group")) {
            item = this._processGroupItem(item, options);
            options.dataIndex = 0
        } else {
            item = super._processItem.apply(this, arguments)
        }
        return item
    }
    _processGroupItem(item, options) {
        return item
    }
    _processGroupItems(items, groupsCount, options) {
        const that = this;
        const groupedColumns = that._columnsController.getGroupColumns();
        const column = groupedColumns[groupedColumns.length - groupsCount];
        if (!options) {
            const scrollingMode = that.option("scrolling.mode");
            options = {
                collectContinuationItems: "virtual" !== scrollingMode && "infinite" !== scrollingMode,
                resultItems: [],
                path: [],
                values: []
            }
        }
        const {
            resultItems: resultItems
        } = options;
        if (options.data) {
            if (options.collectContinuationItems || !options.data.isContinuation) {
                resultItems.push({
                    rowType: "group",
                    data: options.data,
                    groupIndex: options.path.length - 1,
                    isExpanded: !!options.data.items,
                    key: options.path.slice(0),
                    values: options.values.slice(0)
                })
            }
        }
        if (items) {
            if (0 === groupsCount) {
                resultItems.push.apply(resultItems, items)
            } else {
                for (let i = 0; i < items.length; i++) {
                    const item = items[i];
                    if (item && "items" in item) {
                        options.data = item;
                        options.path.push(item.key);
                        options.values.push(column && column.deserializeValue && !column.calculateDisplayValue ? column.deserializeValue(item.key) : item.key);
                        that._processGroupItems(item.items, groupsCount - 1, options);
                        options.data = void 0;
                        options.path.pop();
                        options.values.pop()
                    } else {
                        resultItems.push(item)
                    }
                }
            }
        }
        return resultItems
    }
    publicMethods() {
        return super.publicMethods().concat(["collapseAll", "expandAll", "isRowExpanded", "expandRow", "collapseRow"])
    }
    collapseAll(groupIndex) {
        const dataSource = this._dataSource;
        if (dataSource && dataSource.collapseAll(groupIndex)) {
            dataSource.pageIndex(0);
            dataSource.reload()
        }
    }
    expandAll(groupIndex) {
        const dataSource = this._dataSource;
        if (dataSource && dataSource.expandAll(groupIndex)) {
            dataSource.pageIndex(0);
            dataSource.reload()
        }
    }
    changeRowExpand(key) {
        const that = this;
        const expanded = that.isRowExpanded(key);
        const args = {
            key: key,
            expanded: expanded
        };
        that.executeAction(expanded ? "onRowCollapsing" : "onRowExpanding", args);
        if (!args.cancel) {
            return when(that._changeRowExpandCore(key)).done((() => {
                args.expanded = !expanded;
                that.executeAction(expanded ? "onRowCollapsed" : "onRowExpanded", args)
            }))
        }
        return (new Deferred).resolve()
    }
    _changeRowExpandCore(key) {
        const that = this;
        const dataSource = this._dataSource;
        const d = new Deferred;
        if (!dataSource) {
            d.resolve()
        } else {
            when(dataSource.changeRowExpand(key)).done((() => {
                that.load().done(d.resolve).fail(d.reject)
            })).fail(d.reject)
        }
        return d
    }
    isRowExpanded(key) {
        const dataSource = this._dataSource;
        return dataSource && dataSource.isRowExpanded(key)
    }
    expandRow(key) {
        if (!this.isRowExpanded(key)) {
            return this.changeRowExpand(key)
        }
        return (new Deferred).resolve()
    }
    collapseRow(key) {
        if (this.isRowExpanded(key)) {
            return this.changeRowExpand(key)
        }
        return (new Deferred).resolve()
    }
    optionChanged(args) {
        if ("grouping" === args.name) {
            args.name = "dataSource"
        }
        super.optionChanged(args)
    }
};
const onGroupingMenuItemClick = function(column, rowIndex, params) {
    var _this$getKeyboardNavi, _keyboardNavigationCo2;
    const keyboardNavigationController = null === (_this$getKeyboardNavi = this.getKeyboardNavigationController) || void 0 === _this$getKeyboardNavi ? void 0 : _this$getKeyboardNavi.call(this);
    switch (params.itemData.value) {
        case "group":
            var _keyboardNavigationCo;
            this.isNeedToFocusColumn = true;
            null === keyboardNavigationController || void 0 === keyboardNavigationController || null === (_keyboardNavigationCo = keyboardNavigationController.groupColumn) || void 0 === _keyboardNavigationCo || _keyboardNavigationCo.call(keyboardNavigationController, column, rowIndex);
            break;
        case "ungroup":
            this.isNeedToFocusColumn = true;
            null === keyboardNavigationController || void 0 === keyboardNavigationController || null === (_keyboardNavigationCo2 = keyboardNavigationController.ungroupColumn) || void 0 === _keyboardNavigationCo2 || _keyboardNavigationCo2.call(keyboardNavigationController, column, rowIndex);
            break;
        case "ungroupAll":
            this.isNeedToFocusColumn = true;
            null === keyboardNavigationController || void 0 === keyboardNavigationController || keyboardNavigationController.ungroupAllColumns()
    }
};
const isGroupPanelVisible = groupPanelOptions => {
    const visible = null === groupPanelOptions || void 0 === groupPanelOptions ? void 0 : groupPanelOptions.visible;
    return "auto" === visible ? "desktop" === devices.current().deviceType : !!visible
};
const allowDragging = (groupPanelOptions, column) => {
    const isVisible = isGroupPanelVisible(groupPanelOptions);
    const canDrag = (null === groupPanelOptions || void 0 === groupPanelOptions ? void 0 : groupPanelOptions.allowColumnDragging) && (null === column || void 0 === column ? void 0 : column.allowGrouping);
    return isVisible && !!canDrag
};
export const GroupingHeaderPanelExtender = Base => class extends(ColumnContextMenuMixin(Base)) {
    _getToolbarItems() {
        const items = super._getToolbarItems();
        return this._appendGroupingItem(items)
    }
    _appendGroupingItem(items) {
        if (this._isGroupPanelVisible()) {
            let isRendered = false;
            const toolbarItem = {
                template: () => {
                    const $groupPanel = $("<div>").addClass(CLASSES.groupPanel);
                    this._updateGroupPanelContent($groupPanel);
                    registerKeyboardAction("groupPanel", this, $groupPanel, void 0, this._handleActionKeyDown.bind(this));
                    return $groupPanel
                },
                name: "groupPanel",
                onItemRendered: () => {
                    isRendered && this.renderCompleted.fire();
                    isRendered = true
                },
                location: "before",
                locateInMenu: "never",
                sortIndex: 1
            };
            items.push(toolbarItem);
            this.updateToolbarDimensions()
        }
        return items
    }
    _handleActionKeyDown(args) {
        const {
            event: event
        } = args;
        const $target = $(event.target);
        const groupColumnIndex = $target.closest(`.${CLASSES.groupPanelItem}`).index();
        const column = this._columnsController.getGroupColumns()[groupColumnIndex];
        const columnIndex = column && column.index;
        if ($target.is(".dx-header-filter")) {
            this._headerFilterController.showHeaderFilterMenu(columnIndex, true)
        } else {
            this._processGroupItemAction(columnIndex)
        }
        event.preventDefault()
    }
    _isGroupPanelVisible() {
        return isGroupPanelVisible(this.option("groupPanel"))
    }
    _renderGroupPanelItems($groupPanel, groupColumns) {
        const that = this;
        $groupPanel.empty();
        each(groupColumns, ((index, groupColumn) => {
            that._createGroupPanelItem($groupPanel, groupColumn)
        }));
        restoreFocus(this)
    }
    _createGroupPanelItem($rootElement, groupColumn) {
        const $groupPanelItem = $("<div>").addClass(groupColumn.cssClass).addClass(CLASSES.groupPanelItem).data("columnData", groupColumn).appendTo($rootElement).text(groupColumn.caption);
        setTabIndex(this, $groupPanelItem);
        return $groupPanelItem
    }
    getGroupAndUngroupItems(options) {
        const {
            column: column
        } = options;
        const contextMenuEnabled = this.option("grouping.contextMenuEnabled");
        if (contextMenuEnabled && column) {
            const isGroupingAllowed = isDefined(column.allowGrouping) ? column.allowGrouping : true;
            if (isGroupingAllowed) {
                const isColumnGrouped = isDefined(column.groupIndex) && column.groupIndex > -1;
                const groupingTexts = this.option("grouping.texts");
                const onItemClick = onGroupingMenuItemClick.bind(this, column, 0);
                return [{
                    text: groupingTexts.ungroup,
                    value: "ungroup",
                    disabled: !isColumnGrouped,
                    onItemClick: onItemClick,
                    icon: CONTEXT_MENU_UNGROUP_COLUMN_ICON_NAME
                }, {
                    text: groupingTexts.ungroupAll,
                    value: "ungroupAll",
                    onItemClick: onItemClick,
                    icon: CONTEXT_MENU_UNGROUP_ALL_COLUMNS_ICON_NAME
                }]
            }
        }
        return []
    }
    _columnOptionChanged(e) {
        if (!this._requireReady && !gridCore.checkChanges(e.optionNames, ["width", "visibleWidth"])) {
            const $toolbarElement = this.element();
            const $groupPanel = null === $toolbarElement || void 0 === $toolbarElement ? void 0 : $toolbarElement.find(`.${CLASSES.groupPanel}`);
            if ($groupPanel && $groupPanel.length) {
                this._updateGroupPanelContent($groupPanel);
                this.updateToolbarDimensions();
                this.renderCompleted.fire()
            }
        }
        super._columnOptionChanged()
    }
    _updateGroupPanelContent($groupPanel) {
        const groupColumns = this.getColumns();
        const groupPanelOptions = this.option("groupPanel");
        this._renderGroupPanelItems($groupPanel, groupColumns);
        if (groupPanelOptions.allowColumnDragging && !groupColumns.length) {
            $("<div>").addClass(CLASSES.groupPanelMessage).text(groupPanelOptions.emptyPanelText).appendTo($groupPanel);
            $groupPanel.closest(`.${CLASSES.groupPanelContainer}`).addClass(CLASSES.groupPanelLabel);
            $groupPanel.closest(`.${CLASSES.groupPanelLabel}`).css("maxWidth", "none")
        }
    }
    allowDragging(column) {
        const groupPanelOptions = this.option("groupPanel");
        return allowDragging(groupPanelOptions, column)
    }
    getColumnElements() {
        const $element = this.element();
        return null === $element || void 0 === $element ? void 0 : $element.find(`.${CLASSES.groupPanelItem}`)
    }
    getColumns() {
        return this._columnsController.getGroupColumns()
    }
    getBoundingRect() {
        const $element = this.element();
        if (null !== $element && void 0 !== $element && $element.find(`.${CLASSES.groupPanel}`).length) {
            const offset = $element.offset();
            return {
                top: offset.top,
                bottom: offset.top + getHeight($element)
            }
        }
        return null
    }
    getName() {
        return "group"
    }
    hasGroupedColumns() {
        return this._isGroupPanelVisible() && !!this.getColumns().length
    }
    optionChanged(args) {
        if ("groupPanel" === args.name) {
            this._invalidate();
            args.handled = true
        } else {
            super.optionChanged(args)
        }
    }
    getKeyboardNavigationController() {
        return this.getController("groupPanelKeyboardNavigation")
    }
    isColumnReorderingEnabled(column) {
        return this.allowDragging(column)
    }
    getContextMenuItems(options) {
        let items = super.getContextMenuItems(options);
        const $groupedColumnElement = $(options.targetElement).closest(`.${CLASSES.groupPanelItem}`);
        if (!$groupedColumnElement.length) {
            return
        }
        options.column = this._columnsController.columnOption(`groupIndex:${$groupedColumnElement.index()}`);
        const groupAndUngroupItems = this.getGroupAndUngroupItems(options);
        if (null !== groupAndUngroupItems && void 0 !== groupAndUngroupItems && groupAndUngroupItems.length) {
            items = items ?? [];
            items.push(...groupAndUngroupItems)
        }
        const moveColumnItems = this.getMoveColumnContextMenuItems(options);
        if (null !== moveColumnItems && void 0 !== moveColumnItems && moveColumnItems.length) {
            items = items ?? [];
            items.push(...moveColumnItems)
        }
        return items
    }
};
const GroupingRowsViewExtender = Base => class extends Base {
    getContextMenuItems(options) {
        const that = this;
        const contextMenuEnabled = that.option("grouping.contextMenuEnabled");
        let items;
        if (contextMenuEnabled && options.row && "group" === options.row.rowType) {
            const columnsController = that._columnsController;
            const column = columnsController.columnOption(`groupIndex:${options.row.groupIndex}`);
            if (column && column.allowGrouping) {
                const groupingTexts = that.option("grouping.texts");
                const onItemClick = e => {
                    var _e$itemData, _e$itemData2;
                    if ("ungroup" === (null === (_e$itemData = e.itemData) || void 0 === _e$itemData ? void 0 : _e$itemData.value)) {
                        columnsController.columnOption(column.dataField, "groupIndex", -1)
                    } else if ("ungroupAll" === (null === (_e$itemData2 = e.itemData) || void 0 === _e$itemData2 ? void 0 : _e$itemData2.value)) {
                        columnsController.clearGrouping()
                    }
                };
                items = [];
                items.push({
                    text: groupingTexts.ungroup,
                    value: "ungroup",
                    onItemClick: onItemClick,
                    icon: CONTEXT_MENU_UNGROUP_COLUMN_ICON_NAME
                }, {
                    text: groupingTexts.ungroupAll,
                    value: "ungroupAll",
                    onItemClick: onItemClick,
                    icon: CONTEXT_MENU_UNGROUP_ALL_COLUMNS_ICON_NAME
                })
            }
        }
        return items
    }
    _rowClick(e) {
        const that = this;
        const expandMode = that.option("grouping.expandMode");
        const scrollingMode = that.option("scrolling.mode");
        const isGroupRowStateChanged = "infinite" !== scrollingMode && "rowClick" === expandMode && $(e.event.target).closest(".dx-group-row").length;
        const isExpandButtonClicked = $(e.event.target).closest(".dx-datagrid-expand").length;
        if (isGroupRowStateChanged || isExpandButtonClicked) {
            that._changeGroupRowState(e)
        }
        super._rowClick(e)
    }
    _changeGroupRowState(e) {
        const row = this._dataController.items()[e.rowIndex];
        const allowCollapsing = this._columnsController.columnOption(`groupIndex:${row.groupIndex}`, "allowCollapsing");
        if ("data" === row.rowType || "group" === row.rowType && false !== allowCollapsing) {
            this._dataController.changeRowExpand(row.key, true);
            e.event.preventDefault();
            e.handled = true
        }
    }
};
const columnHeadersViewExtender = Base => class extends Base {
    getContextMenuItems(options) {
        const that = this;
        const groupItems = [];
        const contextMenuEnabled = that.option("grouping.contextMenuEnabled");
        let items = super.getContextMenuItems(options);
        if (contextMenuEnabled && options.row && ("header" === options.row.rowType || "detailAdaptive" === options.row.rowType)) {
            const {
                column: column,
                rowIndex: rowIndex
            } = options;
            if (!column.command && (!isDefined(column.allowGrouping) || column.allowGrouping)) {
                const groupingTexts = that.option("grouping.texts");
                const isColumnGrouped = isDefined(column.groupIndex) && column.groupIndex > -1;
                const onItemClick = onGroupingMenuItemClick.bind(that, column, rowIndex);
                groupItems.push({
                    text: groupingTexts.groupByThisColumn,
                    value: "group",
                    beginGroup: true,
                    disabled: isColumnGrouped,
                    onItemClick: onItemClick,
                    icon: CONTEXT_MENU_GROUP_BY_COLUMN_ICON_NAME
                });
                if (column.showWhenGrouped) {
                    groupItems.push({
                        text: groupingTexts.ungroup,
                        value: "ungroup",
                        disabled: !isColumnGrouped,
                        onItemClick: onItemClick,
                        icon: CONTEXT_MENU_UNGROUP_COLUMN_ICON_NAME
                    })
                }
                groupItems.push({
                    text: groupingTexts.ungroupAll,
                    value: "ungroupAll",
                    onItemClick: onItemClick,
                    icon: CONTEXT_MENU_UNGROUP_ALL_COLUMNS_ICON_NAME
                })
            }
        }
        if (groupItems.length) {
            items = items ?? [];
            const clearSortingItemIndex = items.findIndex((item => "clearSorting" === item.name)) + 1;
            items.splice(clearSortingItemIndex, 0, ...groupItems)
        }
        return items
    }
    allowDragging(column) {
        const groupPanelOptions = this.option("groupPanel");
        return allowDragging(groupPanelOptions, column) || super.allowDragging(column)
    }
};
gridCore.registerModule("grouping", {
    defaultOptions: () => ({
        grouping: {
            autoExpandAll: true,
            allowCollapsing: true,
            contextMenuEnabled: true,
            expandMode: "buttonClick",
            texts: {
                groupContinuesMessage: messageLocalization.format("dxDataGrid-groupContinuesMessage"),
                groupContinuedMessage: messageLocalization.format("dxDataGrid-groupContinuedMessage"),
                groupByThisColumn: messageLocalization.format("dxDataGrid-groupHeaderText"),
                ungroup: messageLocalization.format("dxDataGrid-ungroupHeaderText"),
                ungroupAll: messageLocalization.format("dxDataGrid-ungroupAllText")
            }
        },
        groupPanel: {
            visible: false,
            emptyPanelText: messageLocalization.format("dxDataGrid-groupPanelEmptyText"),
            allowColumnDragging: true
        }
    }),
    extenders: {
        controllers: {
            data: GroupingDataControllerExtender,
            columns: Base => class extends Base {
                _getExpandColumnOptions() {
                    const options = super._getExpandColumnOptions.apply(this, arguments);
                    options.cellTemplate = gridCore.getExpandCellTemplate();
                    return options
                }
            },
            editing: Base => class extends Base {
                _isProcessedItem(item) {
                    return isDefined(item.groupIndex) && isString(item.rowType) && 0 === item.rowType.indexOf("group")
                }
            }
        },
        views: {
            headerPanel: GroupingHeaderPanelExtender,
            rowsView: GroupingRowsViewExtender,
            columnHeadersView: columnHeadersViewExtender
        }
    }
});
