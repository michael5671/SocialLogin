/**
 * DevExtreme (esm/__internal/grids/data_grid/keyboard_navigation/m_column_keyboard_navigation_mixin.js)
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
import {
    isCommandKeyPressed
} from "../../../../common/core/events/utils";
import {
    isDefined
} from "../../../../core/utils/type";
import {
    KEY_CODES
} from "../../../grids/grid_core/keyboard_navigation/const";
export const ColumnKeyboardNavigationMixin = Base => class extends Base {
    ungroupColumnByPressingKey(e) {
        var _e$originalEvent;
        const column = this.getColumnFromEvent(e);
        const rowIndex = this.getRowIndexFromEvent(e);
        this.ungroupColumn(column, rowIndex);
        null === (_e$originalEvent = e.originalEvent) || void 0 === _e$originalEvent || _e$originalEvent.preventDefault()
    }
    getFocusedCellPositionByColumn(column) {
        if (!column) {
            return
        }
        const newRowIndex = this._columnsController.getRowIndex(column.index, true);
        return {
            rowIndex: newRowIndex,
            columnIndex: this.getVisibleIndex(column, newRowIndex)
        }
    }
    getRowIndexFromEvent(e) {
        return 0
    }
    getColumnFromEvent(e) {}
    getNewFocusedColumnBeforeUngrouping(column, rowIndex) {
        return column
    }
    keyDownHandler(e) {
        let isHandled = super.keyDownHandler(e);
        if (isHandled) {
            return true
        }
        if (this.canUngroupColumnByPressingKey(e)) {
            this.ungroupColumnByPressingKey(e);
            isHandled = true
        } else if (this.canUngroupAllColumnByPressingKey(e)) {
            this.ungroupAllColumns();
            isHandled = true
        }
        return isHandled
    }
    changeGroupColumnIndex(groupIndex, column, newFocusedColumn) {
        this._columnsController.beginUpdate();
        this._columnsController.columnOption(column.dataField, "groupIndex", groupIndex);
        const newFocusedCellPosition = this.getFocusedCellPositionByColumn(newFocusedColumn);
        this.updateViewFocusPosition(newFocusedCellPosition);
        this._columnsController.endUpdate()
    }
    canUngroupColumnByPressingKey(e) {
        return e.which === KEY_CODES.G && e.shift && isCommandKeyPressed(e.originalEvent)
    }
    canUngroupAllColumnByPressingKey(e) {
        return e.which === KEY_CODES.G && e.shift && e.alt
    }
    ungroupColumn(column) {
        let rowIndex = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
        if (isDefined(null === column || void 0 === column ? void 0 : column.groupIndex)) {
            const newFocusedColumn = this.getNewFocusedColumnBeforeUngrouping(column, rowIndex);
            this.changeGroupColumnIndex(-1, column, newFocusedColumn)
        }
    }
    ungroupAllColumns() {
        this._columnsController.clearGrouping()
    }
};
