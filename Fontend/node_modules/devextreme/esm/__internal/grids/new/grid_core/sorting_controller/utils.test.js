/**
 * DevExtreme (esm/__internal/grids/new/grid_core/sorting_controller/utils.test.js)
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
import {
    describe,
    expect
} from "@jest/globals";
import each from "jest-each";
import {
    getNextSortOrder,
    sortOrderDelegate
} from "./utils";
describe("getNextSortOrder", (() => {
    describe("with pressed ctrl (meta) key", (() => {
        each`
            currentOrder | ctrlKey | expectedResult
            ${"asc"}     | ${true} | ${void 0}
            ${"desc"}    | ${true} | ${void 0}
            ${void 0} | ${true} | ${void 0}
    `.it("should reset the sort order", (_ref => {
            let {
                currentOrder: currentOrder,
                ctrlKey: ctrlKey,
                expectedResult: expectedResult
            } = _ref;
            const result = getNextSortOrder(currentOrder, ctrlKey);
            expect(result).toEqual(expectedResult)
        }))
    }));
    describe("without pressed ctrl (meta) key", (() => {
        each`
            currentOrder | ctrlKey | expectedResult
            ${"asc"}     | ${false} | ${"desc"}
            ${"desc"}    | ${false} | ${"asc"}
            ${void 0} | ${false} | ${"asc"}
    `.it("should invert the sort order or return ascending", (_ref2 => {
            let {
                currentOrder: currentOrder,
                ctrlKey: ctrlKey,
                expectedResult: expectedResult
            } = _ref2;
            const result = getNextSortOrder(currentOrder, ctrlKey);
            expect(result).toEqual(expectedResult)
        }))
    }))
}));
describe("sortOrderDelegate", (() => {
    describe("when sortIndex is not defined for both columns", (() => {
        each`
            columnA                                        | columnB                                      | expectedResult
            ${{visibleIndex:1,sortIndex:void 0}}   | ${{visibleIndex:2,sortIndex:void 0}} | ${-1}
            ${{visibleIndex:1,sortIndex:void 0}}   | ${{visibleIndex:0,sortIndex:void 0}} | ${1}
            ${{visibleIndex:4,sortIndex:void 0}}   | ${{visibleIndex:2,sortIndex:void 0}} | ${2}
            ${{visibleIndex:3,sortIndex:void 0}}   | ${{visibleIndex:5,sortIndex:void 0}} | ${-2}
            ${{visibleIndex:4,sortIndex:void 0}}   | ${{visibleIndex:4,sortIndex:void 0}} | ${0}
    `.it("should take into account visibleIndex", (_ref3 => {
            let {
                columnA: columnA,
                columnB: columnB,
                expectedResult: expectedResult
            } = _ref3;
            const result = sortOrderDelegate(columnA, columnB);
            expect(result).toEqual(expectedResult)
        }))
    }));
    describe("when sortIndex is not defined for one of columns", (() => {
        each`
            columnA                                        | columnB                                      | expectedResult
            ${{visibleIndex:1,sortIndex:void 0}}   | ${{visibleIndex:2,sortIndex:1}}         | ${1}
            ${{visibleIndex:1,sortIndex:3}}           | ${{visibleIndex:0,sortIndex:void 0}} | ${-1}
            ${{visibleIndex:4,sortIndex:2}}           | ${{visibleIndex:2,sortIndex:void 0}} | ${-1}
            ${{visibleIndex:3,sortIndex:void 0}}   | ${{visibleIndex:5,sortIndex:0}}         | ${1}
    `.it("should give a priority to column with undefined sortIndex", (_ref4 => {
            let {
                columnA: columnA,
                columnB: columnB,
                expectedResult: expectedResult
            } = _ref4;
            const result = sortOrderDelegate(columnA, columnB);
            expect(result).toEqual(expectedResult)
        }))
    }));
    describe("when sortIndex is defined for both columns", (() => {
        each`
            columnA                                | columnB                              | expectedResult
            ${{visibleIndex:1,sortIndex:0}}   | ${{visibleIndex:2,sortIndex:1}} | ${-1}
            ${{visibleIndex:1,sortIndex:3}}   | ${{visibleIndex:0,sortIndex:4}} | ${-1}
            ${{visibleIndex:4,sortIndex:2}}   | ${{visibleIndex:2,sortIndex:0}} | ${2}
            ${{visibleIndex:3,sortIndex:3}}   | ${{visibleIndex:5,sortIndex:1}} | ${2}
    `.it("should give a priority to column with a greater sortIndex", (_ref5 => {
            let {
                columnA: columnA,
                columnB: columnB,
                expectedResult: expectedResult
            } = _ref5;
            const result = sortOrderDelegate(columnA, columnB);
            expect(result).toEqual(expectedResult)
        }))
    }))
}));
