/**
 * DevExtreme (esm/__internal/grids/new/grid_core/core/view.js)
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
import _extends from "@babel/runtime/helpers/esm/extends";
import {
    createComponentVNode,
    normalizeProps
} from "inferno";
import {
    effect
} from "@preact/signals-core";
import {
    infernoRenderer
} from "../../../../core/m_inferno_renderer";
import {
    BaseInfernoComponent
} from "../../../../core/r1/runtime/inferno/base_component";
import {
    hasWindow
} from "../../../../core/utils/m_window";
export class View {
    constructor() {
        this.firstRender = true
    }
    render(root) {
        this.root = root;
        const ViewComponent = this.component;
        const props = this.getProps();
        return effect((() => {
            this.props = props.value;
            const content = normalizeProps(createComponentVNode(2, ViewComponent, _extends({}, props.value)));
            infernoRenderer.renderIntoContainer(content, root, !this.firstRender);
            this.firstRender = false
        }))
    }
    asInferno() {
        return this.inferno ?? (this.inferno = this._asInferno())
    }
    _asInferno() {
        const view = this;
        return class extends BaseInfernoComponent {
            constructor() {
                super();
                const props = view.getProps();
                this.unsubscribe = effect((() => {
                    view.props = props.value;
                    this.state ?? (this.state = {
                        props: props.value
                    });
                    if (this.state.props !== props.value && hasWindow()) {
                        this.setState({
                            props: props.value
                        })
                    }
                }))
            }
            componentWillUnmount() {
                this.unsubscribe()
            }
            render() {
                const ViewComponent = view.component;
                return normalizeProps(createComponentVNode(2, ViewComponent, _extends({}, this.state.props)))
            }
        }
    }
}
