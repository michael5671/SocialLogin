/**
 * DevExtreme (esm/__internal/grids/new/grid_core/inferno_wrappers/tree_view.js)
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
const _excluded = ["selected"],
    _excluded2 = ["selected"];
import {
    equalByValue
} from "../../../../../core/utils/common";
import dxTreeView from "../../../../../ui/tree_view";
import {
    InfernoWrapper
} from "./widget_wrapper";
export class TreeView extends InfernoWrapper {
    getComponentFabric() {
        return dxTreeView
    }
    updateComponentOptions(prevProps, props) {
        var _this$component, _this$component2;
        const itemsOnlySelectionChanged = this.isItemsOnlySelectionChanged(prevProps, props);
        const propsToUpdate = _extends({}, props);
        if (itemsOnlySelectionChanged) {
            this.updateSelection(props.items ?? []);
            delete propsToUpdate.items
        }
        const scrollTop = null === (_this$component = this.component) || void 0 === _this$component || null === (_this$component = _this$component.getScrollable()) || void 0 === _this$component ? void 0 : _this$component.scrollTop();
        super.updateComponentOptions(prevProps, propsToUpdate);
        null === (_this$component2 = this.component) || void 0 === _this$component2 || null === (_this$component2 = _this$component2.getScrollable()) || void 0 === _this$component2 || _this$component2.scrollTo({
            top: scrollTop
        })
    }
    isItemsOnlySelectionChanged(prevProps, props) {
        const oldItems = (prevProps.items ?? []).map((_ref => {
            let restProps = _objectWithoutPropertiesLoose(_ref, _excluded);
            return restProps
        }));
        const newItems = (props.items ?? []).map((_ref2 => {
            let restProps = _objectWithoutPropertiesLoose(_ref2, _excluded2);
            return restProps
        }));
        const onlySelectionChanged = equalByValue(oldItems, newItems);
        return onlySelectionChanged
    }
    updateSelection(items) {
        const treeView = this.component;
        if (!treeView) {
            return
        }
        const selectedKeys = treeView.getSelectedNodeKeys();
        treeView.beginUpdate();
        items.forEach(((item, index) => {
            const isSelected = selectedKeys.includes(item.id);
            if (item.selected && !isSelected) {
                treeView.selectItem(index)
            }
            if (!item.selected && isSelected) {
                treeView.unselectItem(index)
            }
        }));
        treeView.endUpdate()
    }
}
