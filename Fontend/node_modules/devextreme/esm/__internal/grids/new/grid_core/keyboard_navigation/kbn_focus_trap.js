/**
 * DevExtreme (esm/__internal/grids/new/grid_core/keyboard_navigation/kbn_focus_trap.js)
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
const _excluded = ["elementRef", "children"],
    _excluded2 = ["elementRef", "onKeyDown", "children"],
    _excluded3 = ["enabled", "ref", "onKeyDown"];
import {
    createVNode,
    createComponentVNode,
    normalizeProps
} from "inferno";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
    var d, c = arguments.length,
        r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
    if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) {
        r = Reflect.decorate(decorators, target, key, desc)
    } else {
        for (var i = decorators.length - 1; i >= 0; i--) {
            if (d = decorators[i]) {
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r
            }
        }
    }
    return c > 3 && r && Object.defineProperty(target, key, r), r
};
var __metadata = this && this.__metadata || function(k, v) {
    if ("object" === typeof Reflect && "function" === typeof Reflect.metadata) {
        return Reflect.metadata(k, v)
    }
};
import {
    eventHandler,
    eventUtils,
    NativeEventListener
} from "../../../../grids/new/grid_core/core/events/index";
import {
    Component,
    createRef
} from "inferno";
import {
    ALL_FOCUSABLE_ELEMENTS_SELECTOR
} from "./const";
export const KbnFocusTrapDisabled = props => {
    const {
        elementRef: elementRef,
        children: children
    } = props, restProps = _objectWithoutPropertiesLoose(props, _excluded);
    return normalizeProps(createVNode(1, "div", null, createVNode(1, "div", null, [createVNode(1, "div", null, null, 1, {
        "data-dx-focus-decoy": false
    }), children, createVNode(1, "div", null, null, 1, {
        "data-dx-focus-decoy": false
    })], 0, {
        "data-dx-focus-trap-content": false
    }), 2, _extends({}, restProps), null, elementRef))
};
export class KbnFocusTrapEnabled extends Component {
    constructor() {
        super(...arguments);
        this.elementRef = createRef();
        this.firstFocusDecoyRef = createRef();
        this.lastFocusDecoyRef = createRef();
        this.eventListener = new NativeEventListener
    }
    componentDidMount() {
        this.eventListener.add(this.firstFocusDecoyRef, "focusin", this.onFirstDecoyFocusIn.bind(this)).add(this.lastFocusDecoyRef, "focusin", this.onLastDecoyFocusIn.bind(this))
    }
    componentWillUnmount() {
        this.eventListener.unsubscribe()
    }
    render() {
        const _this$props = this.props,
            {
                children: children
            } = _this$props,
            restProps = _objectWithoutPropertiesLoose(_this$props, _excluded2);
        const ref = this.getActualRef();
        return normalizeProps(createVNode(1, "div", null, createVNode(1, "div", null, [createVNode(1, "div", null, null, 1, {
            "data-dx-focus-decoy": true,
            tabindex: 0
        }, null, this.firstFocusDecoyRef), children, createVNode(1, "div", null, null, 1, {
            "data-dx-focus-decoy": true,
            tabindex: 0
        }, null, this.lastFocusDecoyRef)], 0, {
            "data-dx-focus-trap-content": true,
            onKeyDown: this.onContentKeyDown.bind(this)
        }), 2, _extends({
            onKeyDown: this.onKeyDown.bind(this)
        }, restProps), null, ref))
    }
    onKeyDown(event) {
        var _this$props$onKeyDown, _this$props2;
        if ("Enter" === event.key && !event.shiftKey) {
            this.focusLastChild();
            eventUtils.markHandled(event)
        }
        null === (_this$props$onKeyDown = (_this$props2 = this.props).onKeyDown) || void 0 === _this$props$onKeyDown || _this$props$onKeyDown.call(_this$props2, event)
    }
    onContentKeyDown(event) {
        if ("Escape" === event.key) {
            var _this$getActualRef$cu;
            null === (_this$getActualRef$cu = this.getActualRef().current) || void 0 === _this$getActualRef$cu || _this$getActualRef$cu.focus();
            eventUtils.markHandled(event)
        }
        eventUtils.markIgnored(event)
    }
    onFirstDecoyFocusIn() {
        this.focusLastChild()
    }
    onLastDecoyFocusIn() {
        const firstFocusableElement = this.getInnerFocusableElement("first");
        null === firstFocusableElement || void 0 === firstFocusableElement || firstFocusableElement.focus()
    }
    focusLastChild() {
        const lastFocusableElement = this.getInnerFocusableElement("last");
        null === lastFocusableElement || void 0 === lastFocusableElement || lastFocusableElement.focus()
    }
    getActualRef() {
        return this.props.elementRef ?? this.elementRef
    }
    getInnerFocusableElement(type) {
        var _elementRef$current;
        const elementRef = this.getActualRef();
        const focusableElements = null === (_elementRef$current = elementRef.current) || void 0 === _elementRef$current ? void 0 : _elementRef$current.querySelectorAll(ALL_FOCUSABLE_ELEMENTS_SELECTOR);
        const focusableElementsCount = (null === focusableElements || void 0 === focusableElements ? void 0 : focusableElements.length) ?? 0;
        if (!focusableElements || focusableElementsCount < 3) {
            return null
        }
        return "first" === type ? focusableElements[1] : focusableElements[focusableElementsCount - 2]
    }
}
__decorate([eventHandler, __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", void 0)], KbnFocusTrapEnabled.prototype, "onKeyDown", null);
__decorate([eventHandler, __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", void 0)], KbnFocusTrapEnabled.prototype, "onContentKeyDown", null);
__decorate([eventHandler, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], KbnFocusTrapEnabled.prototype, "onFirstDecoyFocusIn", null);
__decorate([eventHandler, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], KbnFocusTrapEnabled.prototype, "onLastDecoyFocusIn", null);
export const KbnFocusTrap = props => {
    const {
        enabled: enabled,
        onKeyDown: onKeyDown
    } = props, restProps = _objectWithoutPropertiesLoose(props, _excluded3);
    return enabled ? normalizeProps(createComponentVNode(2, KbnFocusTrapEnabled, _extends({}, restProps, {
        onKeyDown: onKeyDown
    }))) : normalizeProps(createComponentVNode(2, KbnFocusTrapDisabled, _extends({}, restProps, {
        onKeyDown: onKeyDown
    })))
};
