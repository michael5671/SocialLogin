/**
 * DevExtreme (esm/__internal/grids/new/grid_core/editing/public_methods.js)
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
import {
    isDefined
} from "../../../../core/utils/m_type";
import {
    ItemsController
} from "../items_controller/items_controller";
import {
    EditingController
} from "./controller";
export function PublicMethods(GridCore) {
    return class extends GridCore {
        addCard() {
            const controller = this.diContext.get(EditingController);
            return controller.addCard()
        }
        cancelEditData() {
            const controller = this.diContext.get(EditingController);
            controller.clear()
        }
        deleteCard(cardIndex) {
            var _itemsController$item;
            const controller = this.diContext.get(EditingController);
            const itemsController = this.diContext.get(ItemsController);
            const cardKey = null === (_itemsController$item = itemsController.items.peek()[cardIndex]) || void 0 === _itemsController$item ? void 0 : _itemsController$item.key;
            if (isDefined(cardKey)) {
                controller.deleteCard(cardKey)
            }
        }
        editCard(cardIndex) {
            var _itemsController$item2;
            const controller = this.diContext.get(EditingController);
            const itemsController = this.diContext.get(ItemsController);
            const cardKey = null === (_itemsController$item2 = itemsController.items.peek()[cardIndex]) || void 0 === _itemsController$item2 ? void 0 : _itemsController$item2.key;
            if (isDefined(cardKey)) {
                controller.editCard(cardKey)
            }
        }
        hasEditData() {
            const controller = this.diContext.get(EditingController);
            return controller.changes.peek().length > 0
        }
        saveEditData() {
            const controller = this.diContext.get(EditingController);
            return controller.save()
        }
    }
}
