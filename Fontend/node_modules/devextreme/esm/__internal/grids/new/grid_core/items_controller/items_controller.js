/**
 * DevExtreme (esm/__internal/grids/new/grid_core/items_controller/items_controller.js)
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
import {
    equalByValue
} from "../../../../../core/utils/common";
import formatHelper from "../../../../../format_helper";
import {
    computed,
    signal
} from "@preact/signals-core";
import {
    ColumnsController
} from "../../../../grids/new/grid_core/columns_controller/columns_controller";
import {
    DataController
} from "../../../../grids/new/grid_core/data_controller/data_controller";
import {
    SearchController
} from "../../../../grids/new/grid_core/search/index";
import {
    parseValue
} from "../utils/parse_value/index";
export class ItemsController {
    constructor(dataController, columnsController, searchController) {
        this.dataController = dataController;
        this.columnsController = columnsController;
        this.searchController = searchController;
        this.selectedCardKeys = signal([]);
        this.additionalItems = signal([]);
        this.items = computed((() => {
            this.searchController.highlightTextOptions.value;
            return this.dataController.items.value.map(((item, itemIndex) => this.createCardInfo(item, this.columnsController.visibleColumns.value, itemIndex, this.selectedCardKeys.value))).concat(this.additionalItems.value)
        }))
    }
    setSelectionState(keys) {
        this.selectedCardKeys.value = keys
    }
    findItemByKey(items, key) {
        return items.find((item => equalByValue(item.key, key))) ?? null
    }
    createCardInfo(data, columns, itemIndex, selectedCardKeys, key) {
        let visible = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : true;
        const itemKey = key ?? this.dataController.getDataKey(data);
        const fields = columns.map(((column, index) => {
            const value = column.calculateFieldValue(data);
            const displayValue = column.calculateDisplayValue(data);
            const formattedText = formatHelper.format(parseValue(column, displayValue), column.format);
            const text = column.customizeText ? column.customizeText({
                value: displayValue,
                valueText: formattedText
            }) : formattedText;
            const highlightedText = this.searchController.getHighlightedText(text);
            return {
                card: {},
                index: index,
                column: column,
                value: value,
                displayValue: displayValue,
                text: text,
                highlightedText: highlightedText
            }
        }));
        const card = {
            fields: fields,
            columns: columns,
            values: fields.map((f => f.value)),
            key: itemKey,
            index: itemIndex,
            isSelected: !!(null !== selectedCardKeys && void 0 !== selectedCardKeys && selectedCardKeys.includes(itemKey)),
            data: data,
            visible: visible
        };
        card.fields.forEach((f => {
            f.card = card
        }));
        return card
    }
    getCardByKey(key) {
        const items = this.items.peek();
        return items.find((item => equalByValue(item.key, key)))
    }
}
ItemsController.dependencies = [DataController, ColumnsController, SearchController];
