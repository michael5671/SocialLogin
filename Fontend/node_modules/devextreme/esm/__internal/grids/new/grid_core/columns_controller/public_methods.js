/**
 * DevExtreme (esm/__internal/grids/new/grid_core/columns_controller/public_methods.js)
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
import {
    isObject
} from "../../../../../core/utils/type";
import {
    getColumnByIndexOrName
} from "./utils";
export function PublicMethods(GridCore) {
    return class extends GridCore {
        getVisibleColumns() {
            return this.columnsController.visibleColumns.peek()
        }
        addColumn(column) {
            this.columnsController.addColumn(column)
        }
        getVisibleColumnIndex(columnNameOrIndex) {
            const column = getColumnByIndexOrName(this.columnsController.columns.peek(), columnNameOrIndex);
            return this.columnsController.visibleColumns.peek().findIndex((c => c.name === (null === column || void 0 === column ? void 0 : column.name)))
        }
        deleteColumn(columnNameOrIndex) {
            const column = getColumnByIndexOrName(this.columnsController.columns.peek(), columnNameOrIndex);
            if (!column) {
                return
            }
            this.columnsController.deleteColumn(column)
        }
        columnOption(columnNameOrIndex, option, value) {
            const column = getColumnByIndexOrName(this.columnsController.columns.peek(), columnNameOrIndex);
            if (!column) {
                return
            }
            if (1 === arguments.length) {
                return column
            }
            if (2 === arguments.length) {
                if (isObject(option)) {
                    Object.entries(option).forEach((_ref => {
                        let [optionName, optionValue] = _ref;
                        this.columnsController.columnOption(column, optionName, optionValue)
                    }))
                } else {
                    return column[option]
                }
            }
            if (3 === arguments.length) {
                this.columnsController.columnOption(column, option, value)
            }
        }
    }
}
