/**
 * DevExtreme (esm/__internal/grids/new/grid_core/filtering/header_filter/view_controller.js)
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
import _extends from "@babel/runtime/helpers/esm/extends";
import {
    signal
} from "@preact/signals-core";
import {
    removeFieldConditionsFromFilter
} from "../../../../../filter_builder/m_utils";
import gridCoreUtils from "../../../../../grids/grid_core/m_utils";
import {
    ColumnsController
} from "../../columns_controller/index";
import {
    getColumnIndexByName
} from "../../columns_controller/utils";
import {
    DataController
} from "../../data_controller/index";
import {
    OptionsController
} from "../../options_controller/options_controller";
import {
    FilterController
} from "../filter_controller";
import {
    getAppliedFilterExpressions
} from "../utils";
import {
    getDataSourceOptions,
    getHeaderFilterListType
} from "./legacy_header_filter";
import {
    getColumnIdentifier
} from "./utils";
export class HeaderFilterViewController {
    constructor(options, dataController, columnsController, filterController) {
        this.options = options;
        this.dataController = dataController;
        this.columnsController = columnsController;
        this.filterController = filterController;
        this.popupStateInternal = signal(null);
        this.popupState = this.popupStateInternal
    }
    openPopup(element, column, onFilterCloseCallback, customApply, isFilterBuilder) {
        const rootDataSource = this.dataController.getStoreLoadAdapter();
        const rootHeaderFilterOptions = this.options.oneWay("headerFilter").peek();
        const filterExpression = this.getFilterExpressionWithoutCurrentColumn(column);
        const type = getHeaderFilterListType(column);
        const {
            columnsController: columnsController
        } = this;
        const popupOptions = {
            type: type,
            column: _extends({}, column),
            isFilterBuilder: isFilterBuilder,
            headerFilter: _extends({}, column.headerFilter),
            filterType: column.filterType,
            filterValues: Array.isArray(column.filterValues) ? [...column.filterValues] : column.filterValues,
            apply() {
                ((filterValues, filterType) => {
                    if (customApply) {
                        customApply(filterValues)
                    } else {
                        columnsController.updateColumns((columns => {
                            const index = getColumnIndexByName(columns, column.name);
                            const newColumns = [...columns];
                            newColumns[index] = _extends({}, newColumns[index], {
                                filterValues: Array.isArray(filterValues) ? [...filterValues] : filterValues,
                                filterType: filterType
                            });
                            return newColumns
                        }))
                    }
                    null === onFilterCloseCallback || void 0 === onFilterCloseCallback || onFilterCloseCallback()
                })(this.filterValues, this.filterType)
            },
            hidePopupCallback: () => {
                this.popupStateInternal.value = null;
                null === onFilterCloseCallback || void 0 === onFilterCloseCallback || onFilterCloseCallback()
            }
        };
        popupOptions.dataSource = getDataSourceOptions(rootDataSource, popupOptions, {
            texts: rootHeaderFilterOptions.texts
        }, filterExpression);
        this.popupStateInternal.value = {
            element: element,
            options: popupOptions
        }
    }
    closePopup() {
        this.popupStateInternal.value = null
    }
    removeColumnFromFilters(appliedFilters, excludedColumn) {
        const columnId = getColumnIdentifier(excludedColumn);
        const filterPanel = removeFieldConditionsFromFilter(appliedFilters.filterPanel, columnId);
        const headerFilter = removeFieldConditionsFromFilter(appliedFilters.headerFilter, columnId);
        return {
            filterPanel: filterPanel,
            headerFilter: headerFilter,
            search: appliedFilters.search
        }
    }
    combineFilterExpressions(filterExpressions) {
        if (!filterExpressions || 0 === filterExpressions.length) {
            return
        }
        return gridCoreUtils.combineFilters(filterExpressions)
    }
    getFilterExpressionWithoutCurrentColumn(column) {
        const appliedFilters = this.filterController.appliedFilters.peek();
        const filtersWithoutCurrentColumn = this.removeColumnFromFilters(appliedFilters, column);
        const filterableColumns = this.columnsController.filterableColumns.peek();
        const customOperations = this.filterController.customOperations.peek();
        const filterSyncEnabled = this.filterController.filterSyncEnabled.peek();
        const appliedFilterExpresssionsArray = getAppliedFilterExpressions(filtersWithoutCurrentColumn, filterableColumns, customOperations, filterSyncEnabled);
        return this.combineFilterExpressions(appliedFilterExpresssionsArray)
    }
}
HeaderFilterViewController.dependencies = [OptionsController, DataController, ColumnsController, FilterController];
