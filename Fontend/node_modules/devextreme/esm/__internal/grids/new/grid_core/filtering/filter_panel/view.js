/**
 * DevExtreme (esm/__internal/grids/new/grid_core/filtering/filter_panel/view.js)
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
import {
    computed
} from "@preact/signals-core";
import {
    FilterBuilderView as OldFilterBuilderView
} from "../../../../../grids/grid_core/filter/m_filter_builder";
import {
    FilterPanelView as OldFilterPanelView
} from "../../../../../grids/grid_core/filter/m_filter_panel";
import {
    View
} from "../../core/view";
import {
    WidgetMock
} from "../../widget_mock";
import {
    FilterController
} from "../filter_controller";
import {
    FilterPanelComponent
} from "./filter_panel";
export class FilterPanelView extends View {
    constructor(filterController, widget) {
        super();
        this.filterController = filterController;
        this.widget = widget;
        this.component = FilterPanelComponent;
        this.oldFilterPanelView = new OldFilterPanelView(this.widget);
        this.oldFilterBuilderView = new OldFilterBuilderView(this.widget);
        this.oldFilterPanelView.init();
        this.oldFilterBuilderView.init()
    }
    getProps() {
        return computed((() => ({
            oldFilterBuilderView: this.oldFilterBuilderView,
            oldFilterPanelView: this.oldFilterPanelView,
            filterValue: this.filterController.filterValueOption.value,
            filterPanel: this.filterController.filterPanelOptions.value,
            filterBuilder: this.filterController.filterBuilderOptions.value,
            filterBuilderPopup: this.filterController.filterBuilderPopupOptions.value
        })))
    }
    optionChanged(args) {
        this.oldFilterBuilderView.optionChanged(args);
        this.oldFilterPanelView.optionChanged(args)
    }
    isCompatibilityMode() {
        return true
    }
}
FilterPanelView.dependencies = [FilterController, WidgetMock];
