/**
 * DevExtreme (esm/__internal/grids/new/grid_core/columns_controller/options.integration.test.js)
 * Version: 25.1.3
 * Build date: Wed Jun 25 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
import {
    afterEach,
    describe,
    expect,
    it
} from "@jest/globals";
import $ from "../../../../../core/renderer";
import CardView from "../../../../grids/new/card_view/widget";
import {
    rerender
} from "inferno";
const SELECTORS = {
    cardView: ".dx-cardview",
    card: ".dx-card",
    value: ".dx-cardview-field-value"
};
const rootQuerySelector = selector => document.body.querySelector(selector);
const rootQuerySelectorAll = selector => Array.from(document.body.querySelectorAll(selector));
const createCardView = options => {
    const container = document.createElement("div");
    document.body.append(container);
    const cardView = new CardView(container, options);
    rerender();
    return cardView
};
describe("ColumnsController - Column Option Generation", (() => {
    let instance;
    afterEach((() => {
        var _$;
        const cardView = rootQuerySelector(SELECTORS.cardView);
        null === (_$ = $(cardView ?? void 0)) || void 0 === _$ || _$.dxCardView("dispose")
    }));
    it("should auto-generate columns from first data row", (() => {
        var _columns$find, _columns$find2, _columns$find3, _columns$find4;
        instance = createCardView({
            dataSource: [{
                name: "Alice",
                age: 25,
                isActive: true,
                birthday: new Date(2e3, 0, 1)
            }]
        });
        const columns = instance.getVisibleColumns();
        expect(columns.map((c => c.dataField))).toEqual(["name", "age", "isActive", "birthday"]);
        expect(null === (_columns$find = columns.find((c => "name" === c.dataField))) || void 0 === _columns$find ? void 0 : _columns$find.dataType).toBe("string");
        expect(null === (_columns$find2 = columns.find((c => "age" === c.dataField))) || void 0 === _columns$find2 ? void 0 : _columns$find2.dataType).toBe("number");
        expect(null === (_columns$find3 = columns.find((c => "isActive" === c.dataField))) || void 0 === _columns$find3 ? void 0 : _columns$find3.dataType).toBe("boolean");
        expect(null === (_columns$find4 = columns.find((c => "birthday" === c.dataField))) || void 0 === _columns$find4 ? void 0 : _columns$find4.dataType).toBe("date")
    }));
    it("should regenerate columns with updated data types after dataSource change", (() => {
        instance = createCardView({
            dataSource: [{
                id: 1
            }]
        });
        expect(instance.getVisibleColumns()[0].dataType).toBe("number");
        instance.option("dataSource", [{
            id: "foo"
        }]);
        rerender();
        expect(instance.getVisibleColumns()[0].dataType).toBe("string")
    }));
    it.each([{
        value: "hello",
        expected: "string"
    }, {
        value: 123,
        expected: "number"
    }, {
        value: true,
        expected: "boolean"
    }, {
        value: new Date(2020, 0, 1),
        expected: "date"
    }])("should respect auto-detected dataType = $expected", (_ref => {
        let {
            value: value,
            expected: expected
        } = _ref;
        instance = createCardView({
            dataSource: [{
                col: value
            }]
        });
        const column = instance.getVisibleColumns().find((c => "col" === c.dataField));
        expect(null === column || void 0 === column ? void 0 : column.dataType).toBe(expected)
    }));
    it.each([{
        dataType: "number",
        format: "currency",
        value: 1999,
        expectedText: "$1,999"
    }, {
        dataType: "date",
        format: "shortDate",
        value: new Date(2020, 0, 2),
        expectedText: "1/2/2020"
    }, {
        dataType: "boolean",
        format: void 0,
        value: true,
        expectedText: "true"
    }, {
        dataType: "string",
        format: void 0,
        value: "Test",
        expectedText: "Test"
    }])("should render formatted value in card for dataType=$dataType with format=$format", (_ref2 => {
        var _rootQuerySelectorAll;
        let {
            dataType: dataType,
            format: format,
            value: value,
            expectedText: expectedText
        } = _ref2;
        instance = createCardView({
            dataSource: [{
                field: value
            }],
            columns: [{
                dataField: "field",
                dataType: dataType,
                format: format
            }]
        });
        const renderedText = null === (_rootQuerySelectorAll = rootQuerySelectorAll(SELECTORS.value)[0]) || void 0 === _rootQuerySelectorAll ? void 0 : _rootQuerySelectorAll.textContent;
        expect(renderedText).toBe(expectedText)
    }));
    describe("when value has mismatched type from declared dataType", (() => {
        it.each([{
            dataType: "number",
            value: "1234",
            expectedText: "1234"
        }, {
            dataType: "date",
            value: "abcde",
            format: "shortDate",
            expectedText: "abcde"
        }, {
            dataType: "boolean",
            value: "hello",
            expectedText: "true"
        }, {
            dataType: "string",
            value: 9876,
            expectedText: "9876"
        }])("should render $value (type mismatch) with declared dataType=$dataType", (_ref3 => {
            var _rootQuerySelectorAll2;
            let {
                dataType: dataType,
                value: value,
                expectedText: expectedText,
                format: format
            } = _ref3;
            instance = createCardView({
                dataSource: [{
                    field: value
                }],
                columns: [{
                    dataField: "field",
                    dataType: dataType,
                    format: format
                }]
            });
            const renderedText = null === (_rootQuerySelectorAll2 = rootQuerySelectorAll(SELECTORS.value)[0]) || void 0 === _rootQuerySelectorAll2 || null === (_rootQuerySelectorAll2 = _rootQuerySelectorAll2.textContent) || void 0 === _rootQuerySelectorAll2 ? void 0 : _rootQuerySelectorAll2.trim();
            expect(renderedText).toBe(expectedText)
        }))
    }))
}));
